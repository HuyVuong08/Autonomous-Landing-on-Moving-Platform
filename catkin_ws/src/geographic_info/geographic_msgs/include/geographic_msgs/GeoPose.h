/*
 * =====================================================================================
 *
 *       Filename:  GeoPose.h
 *
 *    Description:
 *
 *        Version:  1.0
 *        Created:  21/09/21 22:51:53
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  YOUR NAME (),
 *   Organization:
 *
 * =====================================================================================
 */
/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-electric-geographic-info-0.2.0/debian/ros-electric-geographic-info/opt/ros/electric/stacks/geographic_info/geographic_msgs/msg/GeoPose.msg */
#ifndef GEOGRAPHIC_MSGS_MESSAGE_GEOPOSE_H
#define GEOGRAPHIC_MSGS_MESSAGE_GEOPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geographic_msgs/GeoPoint.h"
#include "geometry_msgs/Quaternion.h"

namespace geographic_msgs
{
template <class ContainerAllocator>
struct GeoPose_ {
  typedef GeoPose_<ContainerAllocator> Type;

  GeoPose_()
  : position()
  , orientation()
  {
  }

  GeoPose_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , orientation(_alloc)
  {
  }

  typedef  ::geographic_msgs::GeoPoint_<ContainerAllocator>  _position_type;
   ::geographic_msgs::GeoPoint_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  orientation;


private:
  static const char* __s_getDataType_() { return "geographic_msgs/GeoPose"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "778680b5172de58b7c057d973576c784"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Geographic pose, using the WGS 84 reference ellipsoid.\n\
#\n\
# Orientation uses the East-North-Up (ENU) frame of reference.\n\
# (But, what about singularities at the poles?)\n\
\n\
GeoPoint position\n\
geometry_msgs/Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geographic_msgs/GeoPoint\n\
# Geographic point, using the WGS 84 reference ellipsoid.\n\
\n\
# Latitude [degrees]. Positive is north of equator; negative is south\n\
# (-90 <= latitude <= +90).\n\
float64 latitude\n\
\n\
# Longitude [degrees]. Positive is east of prime meridian; negative is\n\
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n\
# +90, and longitude is irrelevant, but must be in range.\n\
float64 longitude\n\
\n\
# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n\
float64 altitude\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, orientation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, orientation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(orientation);
    return size;
  }

  typedef boost::shared_ptr< ::geographic_msgs::GeoPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::geographic_msgs::GeoPose_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GeoPose
typedef  ::geographic_msgs::GeoPose_<std::allocator<void> > GeoPose;

typedef boost::shared_ptr< ::geographic_msgs::GeoPose> GeoPosePtr;
typedef boost::shared_ptr< ::geographic_msgs::GeoPose const> GeoPoseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::geographic_msgs::GeoPose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::geographic_msgs::GeoPose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace geographic_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::geographic_msgs::GeoPose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::geographic_msgs::GeoPose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::geographic_msgs::GeoPose_<ContainerAllocator> > {
  static const char* value()
  {
    return "778680b5172de58b7c057d973576c784";
  }

  static const char* value(const  ::geographic_msgs::GeoPose_<ContainerAllocator> &) { return value(); }
  static const uint64_t static_value1 = 0x778680b5172de58bULL;
  static const uint64_t static_value2 = 0x7c057d973576c784ULL;
};

template<class ContainerAllocator>
struct DataType< ::geographic_msgs::GeoPose_<ContainerAllocator> > {
  static const char* value()
  {
    return "geographic_msgs/GeoPose";
  }

  static const char* value(const  ::geographic_msgs::GeoPose_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::geographic_msgs::GeoPose_<ContainerAllocator> > {
  static const char* value()
  {
    return "# Geographic pose, using the WGS 84 reference ellipsoid.\n\
#\n\
# Orientation uses the East-North-Up (ENU) frame of reference.\n\
# (But, what about singularities at the poles?)\n\
\n\
GeoPoint position\n\
geometry_msgs/Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geographic_msgs/GeoPoint\n\
# Geographic point, using the WGS 84 reference ellipsoid.\n\
\n\
# Latitude [degrees]. Positive is north of equator; negative is south\n\
# (-90 <= latitude <= +90).\n\
float64 latitude\n\
\n\
# Longitude [degrees]. Positive is east of prime meridian; negative is\n\
# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n\
# +90, and longitude is irrelevant, but must be in range.\n\
float64 longitude\n\
\n\
# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n\
float64 altitude\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::geographic_msgs::GeoPose_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator> struct IsFixedSize< ::geographic_msgs::GeoPose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::geographic_msgs::GeoPose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.orientation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GeoPose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::geographic_msgs::GeoPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::geographic_msgs::GeoPose_<ContainerAllocator> & v)
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::geographic_msgs::GeoPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GEOGRAPHIC_MSGS_MESSAGE_GEOPOSE_H
