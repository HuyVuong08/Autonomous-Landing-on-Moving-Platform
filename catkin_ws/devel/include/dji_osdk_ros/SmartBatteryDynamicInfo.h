// Generated by gencpp from file dji_osdk_ros/SmartBatteryDynamicInfo.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_SMARTBATTERYDYNAMICINFO_H
#define DJI_OSDK_ROS_MESSAGE_SMARTBATTERYDYNAMICINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dji_osdk_ros/SmartBatteryState.h>

namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct SmartBatteryDynamicInfo_
{
  typedef SmartBatteryDynamicInfo_<ContainerAllocator> Type;

  SmartBatteryDynamicInfo_()
    : batteryIndex(0)
    , currentVoltage(0)
    , currentElectric(0)
    , fullCapacity(0)
    , remainedCapacity(0)
    , batteryTemperature(0)
    , cellCount(0)
    , batteryCapacityPercent(0)
    , batteryState()
    , SOP(0)  {
    }
  SmartBatteryDynamicInfo_(const ContainerAllocator& _alloc)
    : batteryIndex(0)
    , currentVoltage(0)
    , currentElectric(0)
    , fullCapacity(0)
    , remainedCapacity(0)
    , batteryTemperature(0)
    , cellCount(0)
    , batteryCapacityPercent(0)
    , batteryState(_alloc)
    , SOP(0)  {
  (void)_alloc;
    }



   typedef uint8_t _batteryIndex_type;
  _batteryIndex_type batteryIndex;

   typedef int32_t _currentVoltage_type;
  _currentVoltage_type currentVoltage;

   typedef int32_t _currentElectric_type;
  _currentElectric_type currentElectric;

   typedef uint32_t _fullCapacity_type;
  _fullCapacity_type fullCapacity;

   typedef uint32_t _remainedCapacity_type;
  _remainedCapacity_type remainedCapacity;

   typedef int16_t _batteryTemperature_type;
  _batteryTemperature_type batteryTemperature;

   typedef uint8_t _cellCount_type;
  _cellCount_type cellCount;

   typedef uint8_t _batteryCapacityPercent_type;
  _batteryCapacityPercent_type batteryCapacityPercent;

   typedef  ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator>  _batteryState_type;
  _batteryState_type batteryState;

   typedef uint8_t _SOP_type;
  _SOP_type SOP;





  typedef boost::shared_ptr< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SmartBatteryDynamicInfo_

typedef ::dji_osdk_ros::SmartBatteryDynamicInfo_<std::allocator<void> > SmartBatteryDynamicInfo;

typedef boost::shared_ptr< ::dji_osdk_ros::SmartBatteryDynamicInfo > SmartBatteryDynamicInfoPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::SmartBatteryDynamicInfo const> SmartBatteryDynamicInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator2> & rhs)
{
  return lhs.batteryIndex == rhs.batteryIndex &&
    lhs.currentVoltage == rhs.currentVoltage &&
    lhs.currentElectric == rhs.currentElectric &&
    lhs.fullCapacity == rhs.fullCapacity &&
    lhs.remainedCapacity == rhs.remainedCapacity &&
    lhs.batteryTemperature == rhs.batteryTemperature &&
    lhs.cellCount == rhs.cellCount &&
    lhs.batteryCapacityPercent == rhs.batteryCapacityPercent &&
    lhs.batteryState == rhs.batteryState &&
    lhs.SOP == rhs.SOP;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdcd4be856eb19722059d659610eb844";
  }

  static const char* value(const ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdcd4be856eb1972ULL;
  static const uint64_t static_value2 = 0x2059d659610eb844ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/SmartBatteryDynamicInfo";
  }

  static const char* value(const ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  batteryIndex\n"
"int32  currentVoltage          # uint:mV\n"
"int32  currentElectric         # uint:mA\n"
"uint32 fullCapacity            # uint:mAh\n"
"uint32 remainedCapacity        # uint:mAh\n"
"int16  batteryTemperature      # uint:0.1â„ƒ\n"
"uint8  cellCount\n"
"uint8  batteryCapacityPercent  # uint:%\n"
"SmartBatteryState batteryState\n"
"uint8  SOP                     # Relative power percentage\n"
"================================================================================\n"
"MSG: dji_osdk_ros/SmartBatteryState\n"
"uint8 cellBreak                  # 0:normal;other:Undervoltage core index(0x01-0x1F)\n"
"uint8 selfCheckError             # enum-type: DJISmartBatterySelfCheck\n"
"uint8 batteryClosedReason        # enum-type: DJI_BETTERY_CLOSED_REASON\n"
"uint8 batSOHState                # enum-type: DJISmartBatterySohState*/\n"
"uint8 maxCycleLimit              # APP:cycle_limit*10*/\n"
"uint8 batteryCommunicationAbnormal\n"
"uint8 hasCellBreak\n"
"uint8 heatState                  # enum-type: DJISmartBatteryHeatState\n"
;
  }

  static const char* value(const ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.batteryIndex);
      stream.next(m.currentVoltage);
      stream.next(m.currentElectric);
      stream.next(m.fullCapacity);
      stream.next(m.remainedCapacity);
      stream.next(m.batteryTemperature);
      stream.next(m.cellCount);
      stream.next(m.batteryCapacityPercent);
      stream.next(m.batteryState);
      stream.next(m.SOP);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SmartBatteryDynamicInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::SmartBatteryDynamicInfo_<ContainerAllocator>& v)
  {
    s << indent << "batteryIndex: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryIndex);
    s << indent << "currentVoltage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.currentVoltage);
    s << indent << "currentElectric: ";
    Printer<int32_t>::stream(s, indent + "  ", v.currentElectric);
    s << indent << "fullCapacity: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fullCapacity);
    s << indent << "remainedCapacity: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.remainedCapacity);
    s << indent << "batteryTemperature: ";
    Printer<int16_t>::stream(s, indent + "  ", v.batteryTemperature);
    s << indent << "cellCount: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cellCount);
    s << indent << "batteryCapacityPercent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryCapacityPercent);
    s << indent << "batteryState: ";
    s << std::endl;
    Printer< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >::stream(s, indent + "  ", v.batteryState);
    s << indent << "SOP: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SOP);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_SMARTBATTERYDYNAMICINFO_H
