// Generated by gencpp from file dji_osdk_ros/GetSingleBatteryDynamicInfoRequest.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_GETSINGLEBATTERYDYNAMICINFOREQUEST_H
#define DJI_OSDK_ROS_MESSAGE_GETSINGLEBATTERYDYNAMICINFOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct GetSingleBatteryDynamicInfoRequest_
{
  typedef GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> Type;

  GetSingleBatteryDynamicInfoRequest_()
    : batteryIndex(0)  {
    }
  GetSingleBatteryDynamicInfoRequest_(const ContainerAllocator& _alloc)
    : batteryIndex(0)  {
  (void)_alloc;
    }



   typedef uint8_t _batteryIndex_type;
  _batteryIndex_type batteryIndex;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(first_smart_battery)
  #undef first_smart_battery
#endif
#if defined(_WIN32) && defined(second_smart_battery)
  #undef second_smart_battery
#endif

  enum {
    first_smart_battery = 1u,
    second_smart_battery = 2u,
  };


  typedef boost::shared_ptr< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetSingleBatteryDynamicInfoRequest_

typedef ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<std::allocator<void> > GetSingleBatteryDynamicInfoRequest;

typedef boost::shared_ptr< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest > GetSingleBatteryDynamicInfoRequestPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest const> GetSingleBatteryDynamicInfoRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.batteryIndex == rhs.batteryIndex;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbc22df5041907ba93cd43bd5373dcc1";
  }

  static const char* value(const ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbc22df5041907baULL;
  static const uint64_t static_value2 = 0x93cd43bd5373dcc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/GetSingleBatteryDynamicInfoRequest";
  }

  static const char* value(const ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request\n"
"uint8 first_smart_battery = 1\n"
"uint8 second_smart_battery = 2\n"
"\n"
"uint8 batteryIndex\n"
;
  }

  static const char* value(const ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.batteryIndex);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetSingleBatteryDynamicInfoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::GetSingleBatteryDynamicInfoRequest_<ContainerAllocator>& v)
  {
    s << indent << "batteryIndex: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryIndex);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_GETSINGLEBATTERYDYNAMICINFOREQUEST_H
