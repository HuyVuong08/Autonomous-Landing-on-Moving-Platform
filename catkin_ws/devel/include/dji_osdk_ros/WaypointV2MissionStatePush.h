// Generated by gencpp from file dji_osdk_ros/WaypointV2MissionStatePush.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_WAYPOINTV2MISSIONSTATEPUSH_H
#define DJI_OSDK_ROS_MESSAGE_WAYPOINTV2MISSIONSTATEPUSH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct WaypointV2MissionStatePush_
{
  typedef WaypointV2MissionStatePush_<ContainerAllocator> Type;

  WaypointV2MissionStatePush_()
    : commonDataVersion(0)
    , commonDataLen(0)
    , curWaypointIndex(0)
    , state(0)
    , velocity(0)  {
    }
  WaypointV2MissionStatePush_(const ContainerAllocator& _alloc)
    : commonDataVersion(0)
    , commonDataLen(0)
    , curWaypointIndex(0)
    , state(0)
    , velocity(0)  {
  (void)_alloc;
    }



   typedef int8_t _commonDataVersion_type;
  _commonDataVersion_type commonDataVersion;

   typedef uint16_t _commonDataLen_type;
  _commonDataLen_type commonDataLen;

   typedef uint16_t _curWaypointIndex_type;
  _curWaypointIndex_type curWaypointIndex;

   typedef uint8_t _state_type;
  _state_type state;

   typedef uint16_t _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointV2MissionStatePush_

typedef ::dji_osdk_ros::WaypointV2MissionStatePush_<std::allocator<void> > WaypointV2MissionStatePush;

typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2MissionStatePush > WaypointV2MissionStatePushPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2MissionStatePush const> WaypointV2MissionStatePushConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator2> & rhs)
{
  return lhs.commonDataVersion == rhs.commonDataVersion &&
    lhs.commonDataLen == rhs.commonDataLen &&
    lhs.curWaypointIndex == rhs.curWaypointIndex &&
    lhs.state == rhs.state &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f0a910f9304e8d0a921ad51a303b666";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f0a910f9304e8d0ULL;
  static const uint64_t static_value2 = 0xa921ad51a303b666ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/WaypointV2MissionStatePush";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8   commonDataVersion\n"
"uint16 commonDataLen\n"
"uint16 curWaypointIndex\n"
"uint8  state  #0x0:ground station not start. 0x1:mission prepared. 0x2:enter mission.\n"
"               #0x3:execute flying route mission.\n"
"               #0x4:pause state. 0x5:enter mission after ending pause.\n"
"               #0x6:exit mission.\n"
"uint16 velocity #uint:0.01m/s\n"
;
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.commonDataVersion);
      stream.next(m.commonDataLen);
      stream.next(m.curWaypointIndex);
      stream.next(m.state);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointV2MissionStatePush_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::WaypointV2MissionStatePush_<ContainerAllocator>& v)
  {
    s << indent << "commonDataVersion: ";
    Printer<int8_t>::stream(s, indent + "  ", v.commonDataVersion);
    s << indent << "commonDataLen: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.commonDataLen);
    s << indent << "curWaypointIndex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.curWaypointIndex);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "velocity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_WAYPOINTV2MISSIONSTATEPUSH_H
