// Generated by gencpp from file dji_osdk_ros/WaypointV2Config.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_WAYPOINTV2CONFIG_H
#define DJI_OSDK_ROS_MESSAGE_WAYPOINTV2CONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct WaypointV2Config_
{
  typedef WaypointV2Config_<ContainerAllocator> Type;

  WaypointV2Config_()
    : useLocalCruiseVel(0)
    , useLocalMaxVel(0)  {
    }
  WaypointV2Config_(const ContainerAllocator& _alloc)
    : useLocalCruiseVel(0)
    , useLocalMaxVel(0)  {
  (void)_alloc;
    }



   typedef uint8_t _useLocalCruiseVel_type;
  _useLocalCruiseVel_type useLocalCruiseVel;

   typedef uint8_t _useLocalMaxVel_type;
  _useLocalMaxVel_type useLocalMaxVel;





  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointV2Config_

typedef ::dji_osdk_ros::WaypointV2Config_<std::allocator<void> > WaypointV2Config;

typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2Config > WaypointV2ConfigPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2Config const> WaypointV2ConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator2> & rhs)
{
  return lhs.useLocalCruiseVel == rhs.useLocalCruiseVel &&
    lhs.useLocalMaxVel == rhs.useLocalMaxVel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32f75247c8f43b9a30c17e7ebb7bf75b";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32f75247c8f43b9aULL;
  static const uint64_t static_value2 = 0x30c17e7ebb7bf75bULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/WaypointV2Config";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represents current waypoint's speed config.\n"
"# 0: set local waypoint's cruise speed,\n"
"# 1: unset global waypoint's cruise speed*/\n"
"uint8  useLocalCruiseVel\n"
"# 0: set local waypoint's max speed,\n"
"# 1: unset global waypoint's max speed*/\n"
"uint8  useLocalMaxVel\n"
;
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.useLocalCruiseVel);
      stream.next(m.useLocalMaxVel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointV2Config_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator>& v)
  {
    s << indent << "useLocalCruiseVel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useLocalCruiseVel);
    s << indent << "useLocalMaxVel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useLocalMaxVel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_WAYPOINTV2CONFIG_H
