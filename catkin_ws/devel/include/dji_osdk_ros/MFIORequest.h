// Generated by gencpp from file dji_osdk_ros/MFIORequest.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_MFIOREQUEST_H
#define DJI_OSDK_ROS_MESSAGE_MFIOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct MFIORequest_
{
  typedef MFIORequest_<ContainerAllocator> Type;

  MFIORequest_()
    : action(0)
    , mode(0)
    , block(false)
    , channel(0)
    , init_on_time_us(0)
    , gpio_value(0)
    , pwm_freq(0)  {
    }
  MFIORequest_(const ContainerAllocator& _alloc)
    : action(0)
    , mode(0)
    , block(false)
    , channel(0)
    , init_on_time_us(0)
    , gpio_value(0)
    , pwm_freq(0)  {
  (void)_alloc;
    }



   typedef uint8_t _action_type;
  _action_type action;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _block_type;
  _block_type block;

   typedef uint8_t _channel_type;
  _channel_type channel;

   typedef uint32_t _init_on_time_us_type;
  _init_on_time_us_type init_on_time_us;

   typedef uint8_t _gpio_value_type;
  _gpio_value_type gpio_value;

   typedef uint16_t _pwm_freq_type;
  _pwm_freq_type pwm_freq;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_PWM_OUT)
  #undef MODE_PWM_OUT
#endif
#if defined(_WIN32) && defined(MODE_GPIO_OUT)
  #undef MODE_GPIO_OUT
#endif
#if defined(_WIN32) && defined(MODE_GPIO_IN)
  #undef MODE_GPIO_IN
#endif
#if defined(_WIN32) && defined(MODE_ADC)
  #undef MODE_ADC
#endif
#if defined(_WIN32) && defined(CHANNEL_0)
  #undef CHANNEL_0
#endif
#if defined(_WIN32) && defined(CHANNEL_1)
  #undef CHANNEL_1
#endif
#if defined(_WIN32) && defined(CHANNEL_2)
  #undef CHANNEL_2
#endif
#if defined(_WIN32) && defined(CHANNEL_3)
  #undef CHANNEL_3
#endif
#if defined(_WIN32) && defined(CHANNEL_4)
  #undef CHANNEL_4
#endif
#if defined(_WIN32) && defined(CHANNEL_5)
  #undef CHANNEL_5
#endif
#if defined(_WIN32) && defined(CHANNEL_6)
  #undef CHANNEL_6
#endif
#if defined(_WIN32) && defined(CHANNEL_7)
  #undef CHANNEL_7
#endif
#if defined(_WIN32) && defined(TURN_ON)
  #undef TURN_ON
#endif
#if defined(_WIN32) && defined(TURN_OFF)
  #undef TURN_OFF
#endif

  enum {
    MODE_PWM_OUT = 0u,
    MODE_GPIO_OUT = 2u,
    MODE_GPIO_IN = 3u,
    MODE_ADC = 4u,
    CHANNEL_0 = 0u,
    CHANNEL_1 = 1u,
    CHANNEL_2 = 2u,
    CHANNEL_3 = 3u,
    CHANNEL_4 = 4u,
    CHANNEL_5 = 5u,
    CHANNEL_6 = 6u,
    CHANNEL_7 = 7u,
    TURN_ON = 0u,
    TURN_OFF = 1u,
  };


  typedef boost::shared_ptr< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> const> ConstPtr;

}; // struct MFIORequest_

typedef ::dji_osdk_ros::MFIORequest_<std::allocator<void> > MFIORequest;

typedef boost::shared_ptr< ::dji_osdk_ros::MFIORequest > MFIORequestPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::MFIORequest const> MFIORequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::MFIORequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::MFIORequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::MFIORequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.mode == rhs.mode &&
    lhs.block == rhs.block &&
    lhs.channel == rhs.channel &&
    lhs.init_on_time_us == rhs.init_on_time_us &&
    lhs.gpio_value == rhs.gpio_value &&
    lhs.pwm_freq == rhs.pwm_freq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::MFIORequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::MFIORequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a9f232a9ad94c1663aa32b8a91f6ba6";
  }

  static const char* value(const ::dji_osdk_ros::MFIORequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a9f232a9ad94c16ULL;
  static const uint64_t static_value2 = 0x63aa32b8a91f6ba6ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/MFIORequest";
  }

  static const char* value(const ::dji_osdk_ros::MFIORequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#constant for mode\n"
"uint8 MODE_PWM_OUT  = 0\n"
"#uint8 MODE_PWM_IN  = 1 #PWM_IN is not functioning correctly\n"
"uint8 MODE_GPIO_OUT = 2\n"
"uint8 MODE_GPIO_IN  = 3\n"
"uint8 MODE_ADC      = 4\n"
"\n"
"uint8 CHANNEL_0 = 0\n"
"uint8 CHANNEL_1 = 1\n"
"uint8 CHANNEL_2 = 2\n"
"uint8 CHANNEL_3 = 3\n"
"uint8 CHANNEL_4 = 4\n"
"uint8 CHANNEL_5 = 5\n"
"uint8 CHANNEL_6 = 6\n"
"uint8 CHANNEL_7 = 7\n"
"\n"
"uint8 TURN_ON   = 0     # Control PWM on/off\n"
"uint8 TURN_OFF  = 1\n"
"\n"
"#request\n"
"uint8 action            # Turn On/Off, 0: ON    1: OFF\n"
"uint8 mode              # see constants above for possible modes\n"
"bool block              # Block/Non-block Ouput\n"
"uint8 channel           # 0-7\n"
"uint32 init_on_time_us  # on time for pwm duty cycle in micro-seconds, 0-20000(0%-100%)\n"
"uint8 gpio_value        # 0: Low, 1:High just for GPIO_OUT\n"
"uint16 pwm_freq         # set pwm frequency in Hz\n"
;
  }

  static const char* value(const ::dji_osdk_ros::MFIORequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.mode);
      stream.next(m.block);
      stream.next(m.channel);
      stream.next(m.init_on_time_us);
      stream.next(m.gpio_value);
      stream.next(m.pwm_freq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MFIORequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::MFIORequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::MFIORequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "block: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.block);
    s << indent << "channel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.channel);
    s << indent << "init_on_time_us: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.init_on_time_us);
    s << indent << "gpio_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gpio_value);
    s << indent << "pwm_freq: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_freq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_MFIOREQUEST_H
