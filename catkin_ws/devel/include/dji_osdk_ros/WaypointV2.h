// Generated by gencpp from file dji_osdk_ros/WaypointV2.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_WAYPOINTV2_H
#define DJI_OSDK_ROS_MESSAGE_WAYPOINTV2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dji_osdk_ros/WaypointV2Config.h>

namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct WaypointV2_
{
  typedef WaypointV2_<ContainerAllocator> Type;

  WaypointV2_()
    : longitude(0.0)
    , latitude(0.0)
    , relativeHeight(0.0)
    , waypointType(0)
    , headingMode(0)
    , config()
    , dampingDistance(0)
    , heading(0.0)
    , turnMode(0)
    , positionX(0.0)
    , positionY(0.0)
    , positionZ(0.0)
    , maxFlightSpeed(0.0)
    , autoFlightSpeed(0.0)  {
    }
  WaypointV2_(const ContainerAllocator& _alloc)
    : longitude(0.0)
    , latitude(0.0)
    , relativeHeight(0.0)
    , waypointType(0)
    , headingMode(0)
    , config(_alloc)
    , dampingDistance(0)
    , heading(0.0)
    , turnMode(0)
    , positionX(0.0)
    , positionY(0.0)
    , positionZ(0.0)
    , maxFlightSpeed(0.0)
    , autoFlightSpeed(0.0)  {
  (void)_alloc;
    }



   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef float _relativeHeight_type;
  _relativeHeight_type relativeHeight;

   typedef uint8_t _waypointType_type;
  _waypointType_type waypointType;

   typedef uint8_t _headingMode_type;
  _headingMode_type headingMode;

   typedef  ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator>  _config_type;
  _config_type config;

   typedef uint16_t _dampingDistance_type;
  _dampingDistance_type dampingDistance;

   typedef float _heading_type;
  _heading_type heading;

   typedef uint8_t _turnMode_type;
  _turnMode_type turnMode;

   typedef float _positionX_type;
  _positionX_type positionX;

   typedef float _positionY_type;
  _positionY_type positionY;

   typedef float _positionZ_type;
  _positionZ_type positionZ;

   typedef float _maxFlightSpeed_type;
  _maxFlightSpeed_type maxFlightSpeed;

   typedef float _autoFlightSpeed_type;
  _autoFlightSpeed_type autoFlightSpeed;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DJIWaypointV2FlightPathModeGoToPointAlongACurve)
  #undef DJIWaypointV2FlightPathModeGoToPointAlongACurve
#endif
#if defined(_WIN32) && defined(DJIWaypointV2FlightPathModeGoToPointAlongACurveAndStop)
  #undef DJIWaypointV2FlightPathModeGoToPointAlongACurveAndStop
#endif
#if defined(_WIN32) && defined(DJIWaypointV2FlightPathModeGoToPointInAStraightLineAndStop)
  #undef DJIWaypointV2FlightPathModeGoToPointInAStraightLineAndStop
#endif
#if defined(_WIN32) && defined(DJIWaypointV2FlightPathModeCoordinateTurn)
  #undef DJIWaypointV2FlightPathModeCoordinateTurn
#endif
#if defined(_WIN32) && defined(DJIWaypointV2FlightPathModeGoToFirstPointAlongAStraightLine)
  #undef DJIWaypointV2FlightPathModeGoToFirstPointAlongAStraightLine
#endif
#if defined(_WIN32) && defined(DJIWaypointV2FlightPathModeStraightOut)
  #undef DJIWaypointV2FlightPathModeStraightOut
#endif
#if defined(_WIN32) && defined(DJIWaypointV2FlightPathModeUnknown)
  #undef DJIWaypointV2FlightPathModeUnknown
#endif
#if defined(_WIN32) && defined(DJIWaypointV2HeadingModeAuto)
  #undef DJIWaypointV2HeadingModeAuto
#endif
#if defined(_WIN32) && defined(DJIWaypointV2HeadingFixed)
  #undef DJIWaypointV2HeadingFixed
#endif
#if defined(_WIN32) && defined(DJIWaypointV2HeadingManual)
  #undef DJIWaypointV2HeadingManual
#endif
#if defined(_WIN32) && defined(DJIWaypointV2HeadingWaypointCustom)
  #undef DJIWaypointV2HeadingWaypointCustom
#endif
#if defined(_WIN32) && defined(DJIWaypointV2HeadingTowardPointOfInterest)
  #undef DJIWaypointV2HeadingTowardPointOfInterest
#endif
#if defined(_WIN32) && defined(DJIWaypointV2HeadingGimbalYawFollow)
  #undef DJIWaypointV2HeadingGimbalYawFollow
#endif
#if defined(_WIN32) && defined(DJIWaypointV2HeadingUnknown)
  #undef DJIWaypointV2HeadingUnknown
#endif
#if defined(_WIN32) && defined(DJIWaypointV2TurnModeClockwise)
  #undef DJIWaypointV2TurnModeClockwise
#endif
#if defined(_WIN32) && defined(DJIWaypointV2TurnModeCounterClockwise)
  #undef DJIWaypointV2TurnModeCounterClockwise
#endif
#if defined(_WIN32) && defined(DJIWaypointV2TurnModeUnknown)
  #undef DJIWaypointV2TurnModeUnknown
#endif

  enum {
    DJIWaypointV2FlightPathModeGoToPointAlongACurve = 0u,
    DJIWaypointV2FlightPathModeGoToPointAlongACurveAndStop = 1u,
    DJIWaypointV2FlightPathModeGoToPointInAStraightLineAndStop = 2u,
    DJIWaypointV2FlightPathModeCoordinateTurn = 3u,
    DJIWaypointV2FlightPathModeGoToFirstPointAlongAStraightLine = 4u,
    DJIWaypointV2FlightPathModeStraightOut = 5u,
    DJIWaypointV2FlightPathModeUnknown = 255u,
    DJIWaypointV2HeadingModeAuto = 0u,
    DJIWaypointV2HeadingFixed = 1u,
    DJIWaypointV2HeadingManual = 2u,
    DJIWaypointV2HeadingWaypointCustom = 3u,
    DJIWaypointV2HeadingTowardPointOfInterest = 4u,
    DJIWaypointV2HeadingGimbalYawFollow = 5u,
    DJIWaypointV2HeadingUnknown = 255u,
    DJIWaypointV2TurnModeClockwise = 0u,
    DJIWaypointV2TurnModeCounterClockwise = 1u,
    DJIWaypointV2TurnModeUnknown = 255u,
  };


  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointV2_

typedef ::dji_osdk_ros::WaypointV2_<std::allocator<void> > WaypointV2;

typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2 > WaypointV2Ptr;
typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2 const> WaypointV2ConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::WaypointV2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::WaypointV2_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2_<ContainerAllocator2> & rhs)
{
  return lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude &&
    lhs.relativeHeight == rhs.relativeHeight &&
    lhs.waypointType == rhs.waypointType &&
    lhs.headingMode == rhs.headingMode &&
    lhs.config == rhs.config &&
    lhs.dampingDistance == rhs.dampingDistance &&
    lhs.heading == rhs.heading &&
    lhs.turnMode == rhs.turnMode &&
    lhs.positionX == rhs.positionX &&
    lhs.positionY == rhs.positionY &&
    lhs.positionZ == rhs.positionZ &&
    lhs.maxFlightSpeed == rhs.maxFlightSpeed &&
    lhs.autoFlightSpeed == rhs.autoFlightSpeed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::WaypointV2_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "389194e4db4c519440c6686894700c6a";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x389194e4db4c5194ULL;
  static const uint64_t static_value2 = 0x40c6686894700c6aULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/WaypointV2";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The struct represents a target point in the waypoint mission. For a waypoint\n"
"\n"
"#constant for flightpathMode\n"
"uint8 DJIWaypointV2FlightPathModeGoToPointAlongACurve = 0  #In the mission, the aircraft will go to the waypoint along a curve and fly past the waypoint.\n"
"uint8 DJIWaypointV2FlightPathModeGoToPointAlongACurveAndStop = 1 #In the mission, the aircraft will go to the waypoint along a curve and stop at the waypoint.\n"
"uint8 DJIWaypointV2FlightPathModeGoToPointInAStraightLineAndStop = 2  #In the mission, the aircraft will go to the waypoint along a straight line and stop at the waypoint.\n"
"uint8 DJIWaypointV2FlightPathModeCoordinateTurn = 3   #In the mission, the aircraft will fly from the previous waypoint to the next waypoint along a smooth curve without stopping at this waypoint.\n"
"                                                      #the next in a curved motion,  adhering to the ``DJIWaypointV2_dampingDistance``, which is\n"
"                                                      #set in ``DJIWaypointV2``.\n"
"uint8 DJIWaypointV2FlightPathModeGoToFirstPointAlongAStraightLine = 4  # In the mission, the aircraft will go to the first waypoint along a straight line.\n"
"                                                                       # This is only valid for the first waypoint.\n"
"uint8 DJIWaypointV2FlightPathModeStraightOut = 5   # Straight exit the Last waypoint, Only valid for last waypoint.\n"
"uint8 DJIWaypointV2FlightPathModeUnknown = 255    # Unknown\n"
"\n"
"#constant for headMode\n"
"uint8 DJIWaypointV2HeadingModeAuto = 0    # Aircraft's heading will always be in the direction of flight.\n"
"uint8 DJIWaypointV2HeadingFixed    = 1    # Aircraft's heading will be set to the heading when reaching the first waypoint.\n"
"                                          # Before reaching the first waypoint, the aircraft's heading can be controlled by\n"
"                                          # the remote controller. When the aircraft reaches the first waypoint, its\n"
"                                          # heading will be fixed.\n"
"uint8 DJIWaypointV2HeadingManual   = 2    # The aircraft's heading in the mission can be controlled by the remote controller.\n"
"uint8 DJIWaypointV2HeadingWaypointCustom = 3  # In the mission, the aircraft's heading will change dynamically and adapt to the heading set at the next waypoint.\n"
"                                               # See ``DJIWaypointV2_heading`` to preset the heading.\n"
"uint8 DJIWaypointV2HeadingTowardPointOfInterest = 4 # Aircraft's heading will always toward point of interest.\n"
"                                                    # using ``DJIWaypointV2_pointOfInterest`` setting point of interest coordiate and ``DJIWaypointV2_pointOfInterestAltitude``\n"
"                                                    # setting point of interset altitute.\n"
"uint8 DJIWaypointV2HeadingGimbalYawFollow  = 5   # The aircraft's heading rotate simultaneously with its gimbal's yaw.\n"
"uint8 DJIWaypointV2HeadingUnknown = 255         # Unknown.\n"
"\n"
"#constant for turnMode\n"
"uint8 DJIWaypointV2TurnModeClockwise = 0  # The aircraft's heading rotates clockwise.\n"
"uint8 DJIWaypointV2TurnModeCounterClockwise = 1   # The aircraft's heading rotates counterclockwise.\n"
"uint8 DJIWaypointV2TurnModeUnknown = 255    # Changes the heading of the aircraft by rotating the aircraft anti-clockwise.\n"
"\n"
"\n"
"\n"
"#  mission, a flight route  consists of multiple `WaypointV2` objects.\n"
"float64 longitude  # waypoint position relative to WayPointV2InitSettings's reference point.unit: m\n"
"float64 latitude\n"
"float32 relativeHeight  # relative to takeoff height\n"
"uint8   waypointType    # Waypoint flight path mode\n"
"uint8   headingMode     # Represents current aircraft's heading mode on current waypoint.\n"
"WaypointV2Config  config          # Represents current waypoint's speed config.\n"
"uint16  dampingDistance\n"
"float32 heading         # The heading to which the aircraft will rotate by the time it reaches the\n"
"                        # waypoint. The aircraft heading  will gradually change between two waypoints with\n"
"                        # different headings if the waypoint  mission's `headingMode` is set  to\n"
"                        # 'DJIWaypointV2_DJIWaypointV2HeadingMode_WaypointCustom`. A heading has a range of\n"
"                        # [-180, 180] degrees, where 0 represents True North.\n"
"uint8 turnMode          # Determines whether the aircraft will turn clockwise or anticlockwise when\n"
"                        # changing its heading.\n"
"# Property is used when ``DJIWaypointV2_headingMode`` is\n"
"# ``DJIWaypointV2_DJIWaypointV2HeadingMode_TowardPointOfInterest``.\n"
"# Aircraft will always be heading to point while executing mission. Default is\n"
"# \"kCLLocationCoordinate2DInvalid\".\n"
"float32 positionX       # X distance to reference point, North is positive\n"
"float32 positionY       # Y distance to reference point, East is positive\n"
"float32 positionZ       # Z distance to reference point, UP is positive\n"
"\n"
"# While the aircraft is travelling between waypoints, you can offset its speed by\n"
"# using the throttle joystick on the remote controller. \"maxFlightSpeed\" is this\n"
"# offset when the joystick is pushed to maximum deflection. For example, If\n"
"# maxFlightSpeed is 10 m/s, then pushing the throttle joystick all the way up will\n"
"# add 10 m/s to the aircraft speed, while pushing down will subtract 10 m/s from\n"
"# the aircraft speed. If the remote controller stick is not at maximum deflection,\n"
"# then the offset speed will be interpolated between \"[0, maxFlightSpeed]\"\" with a\n"
"# resolution of 1000 steps. If the offset speed is negative, then the aircraft\n"
"# will fly backwards to previous waypoints. When it reaches the first waypoint, it\n"
"# will then hover in place until a positive speed is applied. \"maxFlightSpeed\" has\n"
"# a range of [2,15] m/s.\n"
"float32 maxFlightSpeed\n"
"\n"
"# The base automatic speed of the aircraft as it moves between waypoints with\n"
"# range [-15, 15] m/s. The aircraft's actual speed is a combination of the base\n"
"# automatic speed, and the speed control given by the throttle joystick on the\n"
"# remote controller. If \"autoFlightSpeed >0\": Actual speed is \"autoFlightSpeed\" +\n"
"# Joystick Speed (with combined max of \"maxFlightSpeed\") If \"autoFlightSpeed =0\":\n"
"# Actual speed is controlled only by the remote controller joystick. If\n"
"# autoFlightSpeed <0\" and the aircraft is at the first waypoint, the aircraft\n"
"# will hover in place until the speed is made positive by the remote controller\n"
"# joystick. In flight controller firmware 3.2.10.0 or above, different speeds\n"
"# between individual waypoints can also be set in waypoint objects which will\n"
"# overwrite \"autoFlightSpeed\".\n"
"float32 autoFlightSpeed\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2Config\n"
"# Represents current waypoint's speed config.\n"
"# 0: set local waypoint's cruise speed,\n"
"# 1: unset global waypoint's cruise speed*/\n"
"uint8  useLocalCruiseVel\n"
"# 0: set local waypoint's max speed,\n"
"# 1: unset global waypoint's max speed*/\n"
"uint8  useLocalMaxVel\n"
;
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.relativeHeight);
      stream.next(m.waypointType);
      stream.next(m.headingMode);
      stream.next(m.config);
      stream.next(m.dampingDistance);
      stream.next(m.heading);
      stream.next(m.turnMode);
      stream.next(m.positionX);
      stream.next(m.positionY);
      stream.next(m.positionZ);
      stream.next(m.maxFlightSpeed);
      stream.next(m.autoFlightSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointV2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::WaypointV2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::WaypointV2_<ContainerAllocator>& v)
  {
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "relativeHeight: ";
    Printer<float>::stream(s, indent + "  ", v.relativeHeight);
    s << indent << "waypointType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waypointType);
    s << indent << "headingMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.headingMode);
    s << indent << "config: ";
    s << std::endl;
    Printer< ::dji_osdk_ros::WaypointV2Config_<ContainerAllocator> >::stream(s, indent + "  ", v.config);
    s << indent << "dampingDistance: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dampingDistance);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "turnMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turnMode);
    s << indent << "positionX: ";
    Printer<float>::stream(s, indent + "  ", v.positionX);
    s << indent << "positionY: ";
    Printer<float>::stream(s, indent + "  ", v.positionY);
    s << indent << "positionZ: ";
    Printer<float>::stream(s, indent + "  ", v.positionZ);
    s << indent << "maxFlightSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.maxFlightSpeed);
    s << indent << "autoFlightSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.autoFlightSpeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_WAYPOINTV2_H
