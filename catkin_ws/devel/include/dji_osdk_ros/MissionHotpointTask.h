// Generated by gencpp from file dji_osdk_ros/MissionHotpointTask.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_MISSIONHOTPOINTTASK_H
#define DJI_OSDK_ROS_MESSAGE_MISSIONHOTPOINTTASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct MissionHotpointTask_
{
  typedef MissionHotpointTask_<ContainerAllocator> Type;

  MissionHotpointTask_()
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , radius(0.0)
    , angular_speed(0.0)
    , is_clockwise(0)
    , start_point(0)
    , yaw_mode(0)  {
    }
  MissionHotpointTask_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , radius(0.0)
    , angular_speed(0.0)
    , is_clockwise(0)
    , start_point(0)
    , yaw_mode(0)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _radius_type;
  _radius_type radius;

   typedef float _angular_speed_type;
  _angular_speed_type angular_speed;

   typedef uint8_t _is_clockwise_type;
  _is_clockwise_type is_clockwise;

   typedef uint8_t _start_point_type;
  _start_point_type start_point;

   typedef uint8_t _yaw_mode_type;
  _yaw_mode_type yaw_mode;





  typedef boost::shared_ptr< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> const> ConstPtr;

}; // struct MissionHotpointTask_

typedef ::dji_osdk_ros::MissionHotpointTask_<std::allocator<void> > MissionHotpointTask;

typedef boost::shared_ptr< ::dji_osdk_ros::MissionHotpointTask > MissionHotpointTaskPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::MissionHotpointTask const> MissionHotpointTaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.radius == rhs.radius &&
    lhs.angular_speed == rhs.angular_speed &&
    lhs.is_clockwise == rhs.is_clockwise &&
    lhs.start_point == rhs.start_point &&
    lhs.yaw_mode == rhs.yaw_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5700988132c5f205ad38c15800896e84";
  }

  static const char* value(const ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5700988132c5f205ULL;
  static const uint64_t static_value2 = 0xad38c15800896e84ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/MissionHotpointTask";
  }

  static const char* value(const ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 latitude  # degree\n"
"float64 longitude # degree\n"
"float64 altitude  # meter\n"
"float64 radius    # meter\n"
"float32 angular_speed #deg/s\n"
"uint8 is_clockwise\n"
"uint8 start_point\n"
"uint8 yaw_mode\n"
;
  }

  static const char* value(const ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.radius);
      stream.next(m.angular_speed);
      stream.next(m.is_clockwise);
      stream.next(m.start_point);
      stream.next(m.yaw_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionHotpointTask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::MissionHotpointTask_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
    s << indent << "angular_speed: ";
    Printer<float>::stream(s, indent + "  ", v.angular_speed);
    s << indent << "is_clockwise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_clockwise);
    s << indent << "start_point: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_point);
    s << indent << "yaw_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_MISSIONHOTPOINTTASK_H
