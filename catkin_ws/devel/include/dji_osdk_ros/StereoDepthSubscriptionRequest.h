// Generated by gencpp from file dji_osdk_ros/StereoDepthSubscriptionRequest.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_STEREODEPTHSUBSCRIPTIONREQUEST_H
#define DJI_OSDK_ROS_MESSAGE_STEREODEPTHSUBSCRIPTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct StereoDepthSubscriptionRequest_
{
  typedef StereoDepthSubscriptionRequest_<ContainerAllocator> Type;

  StereoDepthSubscriptionRequest_()
    : front_depth_240p(0)
    , unsubscribe_240p(0)  {
    }
  StereoDepthSubscriptionRequest_(const ContainerAllocator& _alloc)
    : front_depth_240p(0)
    , unsubscribe_240p(0)  {
  (void)_alloc;
    }



   typedef uint8_t _front_depth_240p_type;
  _front_depth_240p_type front_depth_240p;

   typedef uint8_t _unsubscribe_240p_type;
  _unsubscribe_240p_type unsubscribe_240p;





  typedef boost::shared_ptr< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StereoDepthSubscriptionRequest_

typedef ::dji_osdk_ros::StereoDepthSubscriptionRequest_<std::allocator<void> > StereoDepthSubscriptionRequest;

typedef boost::shared_ptr< ::dji_osdk_ros::StereoDepthSubscriptionRequest > StereoDepthSubscriptionRequestPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::StereoDepthSubscriptionRequest const> StereoDepthSubscriptionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.front_depth_240p == rhs.front_depth_240p &&
    lhs.unsubscribe_240p == rhs.unsubscribe_240p;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd98d26e6c026b94987bcb49dda81428";
  }

  static const char* value(const ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd98d26e6c026b94ULL;
  static const uint64_t static_value2 = 0x987bcb49dda81428ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/StereoDepthSubscriptionRequest";
  }

  static const char* value(const ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# assign value to 1 to subscribe\n"
"uint8 front_depth_240p\n"
"\n"
"# if unsubscribe_240p is 1,\n"
"# service will unsubscribe no matter what\n"
"uint8 unsubscribe_240p\n"
"\n"
;
  }

  static const char* value(const ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front_depth_240p);
      stream.next(m.unsubscribe_240p);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StereoDepthSubscriptionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::StereoDepthSubscriptionRequest_<ContainerAllocator>& v)
  {
    s << indent << "front_depth_240p: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front_depth_240p);
    s << indent << "unsubscribe_240p: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unsubscribe_240p);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_STEREODEPTHSUBSCRIPTIONREQUEST_H
