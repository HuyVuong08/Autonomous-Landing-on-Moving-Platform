// Generated by gencpp from file dji_osdk_ros/SetJoystickModeRequest.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_SETJOYSTICKMODEREQUEST_H
#define DJI_OSDK_ROS_MESSAGE_SETJOYSTICKMODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct SetJoystickModeRequest_
{
  typedef SetJoystickModeRequest_<ContainerAllocator> Type;

  SetJoystickModeRequest_()
    : horizontal_mode(0)
    , vertical_mode(0)
    , yaw_mode(0)
    , horizontal_coordinate(0)
    , stable_mode(0)  {
    }
  SetJoystickModeRequest_(const ContainerAllocator& _alloc)
    : horizontal_mode(0)
    , vertical_mode(0)
    , yaw_mode(0)
    , horizontal_coordinate(0)
    , stable_mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _horizontal_mode_type;
  _horizontal_mode_type horizontal_mode;

   typedef uint8_t _vertical_mode_type;
  _vertical_mode_type vertical_mode;

   typedef uint8_t _yaw_mode_type;
  _yaw_mode_type yaw_mode;

   typedef uint8_t _horizontal_coordinate_type;
  _horizontal_coordinate_type horizontal_coordinate;

   typedef uint8_t _stable_mode_type;
  _stable_mode_type stable_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HORIZONTAL_ANGLE)
  #undef HORIZONTAL_ANGLE
#endif
#if defined(_WIN32) && defined(HORIZONTAL_VELOCITY)
  #undef HORIZONTAL_VELOCITY
#endif
#if defined(_WIN32) && defined(HORIZONTAL_POSITION)
  #undef HORIZONTAL_POSITION
#endif
#if defined(_WIN32) && defined(HORIZONTAL_ANGULAR_RATE)
  #undef HORIZONTAL_ANGULAR_RATE
#endif
#if defined(_WIN32) && defined(VERTICAL_VELOCITY)
  #undef VERTICAL_VELOCITY
#endif
#if defined(_WIN32) && defined(VERTICAL_POSITION)
  #undef VERTICAL_POSITION
#endif
#if defined(_WIN32) && defined(VERTICAL_THRUST)
  #undef VERTICAL_THRUST
#endif
#if defined(_WIN32) && defined(YAW_ANGLE)
  #undef YAW_ANGLE
#endif
#if defined(_WIN32) && defined(YAW_RATE)
  #undef YAW_RATE
#endif
#if defined(_WIN32) && defined(HORIZONTAL_GROUND)
  #undef HORIZONTAL_GROUND
#endif
#if defined(_WIN32) && defined(HORIZONTAL_BODY)
  #undef HORIZONTAL_BODY
#endif
#if defined(_WIN32) && defined(STABLE_DISABLE)
  #undef STABLE_DISABLE
#endif
#if defined(_WIN32) && defined(STABLE_ENABLE)
  #undef STABLE_ENABLE
#endif

  enum {
    HORIZONTAL_ANGLE = 0u,
    HORIZONTAL_VELOCITY = 1u,
    HORIZONTAL_POSITION = 2u,
    HORIZONTAL_ANGULAR_RATE = 3u,
    VERTICAL_VELOCITY = 0u,
    VERTICAL_POSITION = 1u,
    VERTICAL_THRUST = 2u,
    YAW_ANGLE = 0u,
    YAW_RATE = 1u,
    HORIZONTAL_GROUND = 0u,
    HORIZONTAL_BODY = 1u,
    STABLE_DISABLE = 0u,
    STABLE_ENABLE = 1u,
  };


  typedef boost::shared_ptr< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetJoystickModeRequest_

typedef ::dji_osdk_ros::SetJoystickModeRequest_<std::allocator<void> > SetJoystickModeRequest;

typedef boost::shared_ptr< ::dji_osdk_ros::SetJoystickModeRequest > SetJoystickModeRequestPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::SetJoystickModeRequest const> SetJoystickModeRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.horizontal_mode == rhs.horizontal_mode &&
    lhs.vertical_mode == rhs.vertical_mode &&
    lhs.yaw_mode == rhs.yaw_mode &&
    lhs.horizontal_coordinate == rhs.horizontal_coordinate &&
    lhs.stable_mode == rhs.stable_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ceb88ab65abad757e3f8c63ab37f9f7d";
  }

  static const char* value(const ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xceb88ab65abad757ULL;
  static const uint64_t static_value2 = 0xe3f8c63ab37f9f7dULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/SetJoystickModeRequest";
  }

  static const char* value(const ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request\n"
"#contant for horizontal_mode\n"
"# Set the control-mode to control pitch & roll angle of the vehicle.\n"
"# Need to be referenced to either the ground or body frame \n"
"# by HorizontalCoordinate setting.\n"
"# Limit: 35 degree\n"
"uint8 HORIZONTAL_ANGLE = 0\n"
"# Set the control-mode to control horizontal vehicle velocities.\n"
"# Need to be referenced to either the ground or body frame by\n"
"# HorizontalCoordinate setting.\n"
"# Limit: 30 m/s\n"
"uint8 HORIZONTAL_VELOCITY = 1\n"
"# Set the control-mode to control position offsets of pitch & roll directions\n"
"# Need to be referenced to either the ground r body frame by HorizontalCoordinate setting.\n"
"# Limit: N/A\n"
"uint8 HORIZONTAL_POSITION = 2\n"
"# Set the control-mode to control rate of change of the vehicle's attitude\n"
"# Need to be referenced to either the ground or body frame by HorizontalCoordinate setting.\n"
"# Limit: 150.0 deg/s\n"
"uint8 HORIZONTAL_ANGULAR_RATE = 3\n"
"\n"
"#contant for vertical_mode\n"
"# Set the control-mode to control the vertical\n"
"# speed of UAV, upward is positive\n"
"# Limit: -5 to 5 m/s\n"
"uint8 VERTICAL_VELOCITY = 0\n"
"# Set the control-mode to control the height of UAV\n"
"# Limit: 0 to 120 m\n"
"uint8 VERTICAL_POSITION = 1\n"
"# Set the control-mode to directly control the thrust\n"
"# Range: 0% to 100%\n"
"uint8 VERTICAL_THRUST = 2\n"
"\n"
"#contant for yaw_mode\n"
"# Set the control-mode to control yaw angle.\n"
"# Yaw angle is referenced to the ground frame.\n"
"# In this control mode, Ground frame is enforeced in Autopilot.\n"
"uint8 YAW_ANGLE = 0\n"
"# Set the control-mode to control yaw angular velocity.\n"
"# Same reference frame as YAW_ANGLE.\n"
"# Limite: 150 deg/s\n"
"uint8 YAW_RATE = 1\n"
"#contant for horizontal_coordinate\n"
"# Set the x-y of ground frame as the horizontal frame (NEU) */\n"
"uint8 HORIZONTAL_GROUND = 0\n"
"# Set the x-y of body frame as the horizontal frame (FRU) */\n"
"uint8 HORIZONTAL_BODY = 1\n"
"#contant for stable_mode\n"
"# Disable the stable mode\n"
"uint8 STABLE_DISABLE = 0\n"
"# Enable the stable mode\n"
"uint8 STABLE_ENABLE = 1\n"
"\n"
"# Only when the GPS signal is good (health_flag >=3)，horizontal\n"
"# position control (HORIZONTAL_POSITION) related control modes can be used.\n"
"# Only when GPS signal is good (health_flag >=3)，or when AdvancedSensing\n"
"# system is working properly with Autopilot，horizontal velocity control\n"
"# （HORIZONTAL_VELOCITY）related control modes can be used.\n"
"uint8 horizontal_mode\n"
"\n"
"# We suggest developers do not use VERTICAL_POSITION control mode indoor\n"
"# when your UAV flight height is larger than 3 meters.\n"
"# This is because in indoor environments, barometer can be inaccurate, and\n"
"# the vertical controller may fail to keep the height of the UAV.\n"
"uint8 vertical_mode\n"
"uint8 yaw_mode\n"
"uint8 horizontal_coordinate\n"
"\n"
"# Only works in Horizontal velocity control mode\n"
"# In velocity stable mode, drone will brake and hover at one position once\n"
"# the input command is zero.\n"
"# Drone will try to stay in position once in hover state.\n"
"# In velocity non-stable mode, drone will follow the velocity command and\n"
"# doesn’t hover when the command is zero.\n"
"# That’s to say drone will drift with the wind.\n"
"uint8 stable_mode\n"
;
  }

  static const char* value(const ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.horizontal_mode);
      stream.next(m.vertical_mode);
      stream.next(m.yaw_mode);
      stream.next(m.horizontal_coordinate);
      stream.next(m.stable_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJoystickModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::SetJoystickModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "horizontal_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horizontal_mode);
    s << indent << "vertical_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vertical_mode);
    s << indent << "yaw_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw_mode);
    s << indent << "horizontal_coordinate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horizontal_coordinate);
    s << indent << "stable_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stable_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_SETJOYSTICKMODEREQUEST_H
