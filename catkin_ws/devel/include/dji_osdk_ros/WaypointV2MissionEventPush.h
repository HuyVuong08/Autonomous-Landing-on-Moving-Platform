// Generated by gencpp from file dji_osdk_ros/WaypointV2MissionEventPush.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_WAYPOINTV2MISSIONEVENTPUSH_H
#define DJI_OSDK_ROS_MESSAGE_WAYPOINTV2MISSIONEVENTPUSH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct WaypointV2MissionEventPush_
{
  typedef WaypointV2MissionEventPush_<ContainerAllocator> Type;

  WaypointV2MissionEventPush_()
    : event(0)
    , FCTimestamp(0)
    , interruptReason(0)
    , recoverProcess(0)
    , finishReason(0)
    , waypointIndex(0)
    , currentMissionExecNum(0)
    , finishedAllExecNum(0)  {
    }
  WaypointV2MissionEventPush_(const ContainerAllocator& _alloc)
    : event(0)
    , FCTimestamp(0)
    , interruptReason(0)
    , recoverProcess(0)
    , finishReason(0)
    , waypointIndex(0)
    , currentMissionExecNum(0)
    , finishedAllExecNum(0)  {
  (void)_alloc;
    }



   typedef uint8_t _event_type;
  _event_type event;

   typedef uint32_t _FCTimestamp_type;
  _FCTimestamp_type FCTimestamp;

   typedef uint8_t _interruptReason_type;
  _interruptReason_type interruptReason;

   typedef uint8_t _recoverProcess_type;
  _recoverProcess_type recoverProcess;

   typedef uint8_t _finishReason_type;
  _finishReason_type finishReason;

   typedef uint16_t _waypointIndex_type;
  _waypointIndex_type waypointIndex;

   typedef uint8_t _currentMissionExecNum_type;
  _currentMissionExecNum_type currentMissionExecNum;

   typedef uint8_t _finishedAllExecNum_type;
  _finishedAllExecNum_type finishedAllExecNum;





  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointV2MissionEventPush_

typedef ::dji_osdk_ros::WaypointV2MissionEventPush_<std::allocator<void> > WaypointV2MissionEventPush;

typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2MissionEventPush > WaypointV2MissionEventPushPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2MissionEventPush const> WaypointV2MissionEventPushConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator2> & rhs)
{
  return lhs.event == rhs.event &&
    lhs.FCTimestamp == rhs.FCTimestamp &&
    lhs.interruptReason == rhs.interruptReason &&
    lhs.recoverProcess == rhs.recoverProcess &&
    lhs.finishReason == rhs.finishReason &&
    lhs.waypointIndex == rhs.waypointIndex &&
    lhs.currentMissionExecNum == rhs.currentMissionExecNum &&
    lhs.finishedAllExecNum == rhs.finishedAllExecNum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c77093b1b7454aae16109cab2468e222";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc77093b1b7454aaeULL;
  static const uint64_t static_value2 = 0x16109cab2468e222ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/WaypointV2MissionEventPush";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 event\n"
"uint32 FCTimestamp\n"
"#ID:0x01\n"
"uint8 interruptReason #0x00:rc triggered interrupt\n"
"\n"
"#ID:0x02\n"
"uint8 recoverProcess #0x00:finished pause recover\n"
"\n"
"#ID:0x03\n"
"uint8 finishReason #0x00:finished normally; 0x10:External user trigger ended successfully\n"
"\n"
"#ID:0x10\n"
"uint16 waypointIndex\n"
"\n"
"#ID:0x11\n"
"uint8 currentMissionExecNum\n"
"uint8 finishedAllExecNum  #0:not finished; 1:finished all exec num\n"
;
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event);
      stream.next(m.FCTimestamp);
      stream.next(m.interruptReason);
      stream.next(m.recoverProcess);
      stream.next(m.finishReason);
      stream.next(m.waypointIndex);
      stream.next(m.currentMissionExecNum);
      stream.next(m.finishedAllExecNum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointV2MissionEventPush_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::WaypointV2MissionEventPush_<ContainerAllocator>& v)
  {
    s << indent << "event: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.event);
    s << indent << "FCTimestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.FCTimestamp);
    s << indent << "interruptReason: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interruptReason);
    s << indent << "recoverProcess: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recoverProcess);
    s << indent << "finishReason: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finishReason);
    s << indent << "waypointIndex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.waypointIndex);
    s << indent << "currentMissionExecNum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.currentMissionExecNum);
    s << indent << "finishedAllExecNum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finishedAllExecNum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_WAYPOINTV2MISSIONEVENTPUSH_H
