// Generated by gencpp from file dji_osdk_ros/WaypointV2CameraActuator.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_WAYPOINTV2CAMERAACTUATOR_H
#define DJI_OSDK_ROS_MESSAGE_WAYPOINTV2CAMERAACTUATOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dji_osdk_ros/WaypointV2CameraActuatorFocusParam.h>
#include <dji_osdk_ros/WaypointV2CameraActuatorFocalLengthParam.h>

namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct WaypointV2CameraActuator_
{
  typedef WaypointV2CameraActuator_<ContainerAllocator> Type;

  WaypointV2CameraActuator_()
    : actuatorIndex(0)
    , DJIWaypointV2ActionActuatorCameraOperationType(0)
    , focusParam()
    , zoomParam()  {
    }
  WaypointV2CameraActuator_(const ContainerAllocator& _alloc)
    : actuatorIndex(0)
    , DJIWaypointV2ActionActuatorCameraOperationType(0)
    , focusParam(_alloc)
    , zoomParam(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _actuatorIndex_type;
  _actuatorIndex_type actuatorIndex;

   typedef uint16_t _DJIWaypointV2ActionActuatorCameraOperationType_type;
  _DJIWaypointV2ActionActuatorCameraOperationType_type DJIWaypointV2ActionActuatorCameraOperationType;

   typedef  ::dji_osdk_ros::WaypointV2CameraActuatorFocusParam_<ContainerAllocator>  _focusParam_type;
  _focusParam_type focusParam;

   typedef  ::dji_osdk_ros::WaypointV2CameraActuatorFocalLengthParam_<ContainerAllocator>  _zoomParam_type;
  _zoomParam_type zoomParam;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DJIWaypointV2ActionActuatorCameraOperationTypeTakePhoto)
  #undef DJIWaypointV2ActionActuatorCameraOperationTypeTakePhoto
#endif
#if defined(_WIN32) && defined(DJIWaypointV2ActionActuatorCameraOperationTypeStartRecordVideo)
  #undef DJIWaypointV2ActionActuatorCameraOperationTypeStartRecordVideo
#endif
#if defined(_WIN32) && defined(DJIWaypointV2ActionActuatorCameraOperationTypeStopRecordVideo)
  #undef DJIWaypointV2ActionActuatorCameraOperationTypeStopRecordVideo
#endif
#if defined(_WIN32) && defined(DJIWaypointV2ActionActuatorCameraOperationTypeFocus)
  #undef DJIWaypointV2ActionActuatorCameraOperationTypeFocus
#endif
#if defined(_WIN32) && defined(DJIWaypointV2ActionActuatorCameraOperationTypeFocalLength)
  #undef DJIWaypointV2ActionActuatorCameraOperationTypeFocalLength
#endif

  enum {
    DJIWaypointV2ActionActuatorCameraOperationTypeTakePhoto = 1u,
    DJIWaypointV2ActionActuatorCameraOperationTypeStartRecordVideo = 2u,
    DJIWaypointV2ActionActuatorCameraOperationTypeStopRecordVideo = 3u,
    DJIWaypointV2ActionActuatorCameraOperationTypeFocus = 4u,
    DJIWaypointV2ActionActuatorCameraOperationTypeFocalLength = 5u,
  };


  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointV2CameraActuator_

typedef ::dji_osdk_ros::WaypointV2CameraActuator_<std::allocator<void> > WaypointV2CameraActuator;

typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2CameraActuator > WaypointV2CameraActuatorPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2CameraActuator const> WaypointV2CameraActuatorConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator2> & rhs)
{
  return lhs.actuatorIndex == rhs.actuatorIndex &&
    lhs.DJIWaypointV2ActionActuatorCameraOperationType == rhs.DJIWaypointV2ActionActuatorCameraOperationType &&
    lhs.focusParam == rhs.focusParam &&
    lhs.zoomParam == rhs.zoomParam;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70a055c9fb9f49f67d8f5bf884fe592d";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70a055c9fb9f49f6ULL;
  static const uint64_t static_value2 = 0x7d8f5bf884fe592dULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/WaypointV2CameraActuator";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This determines how the camera will be performed when a waypoint mission is executing.\n"
"#constant for DJIWaypointV2ActionActuatorCameraOperationType\n"
"# Starts to shoot a photo.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeTakePhoto = 1\n"
"# Starts to record a video.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeStartRecordVideo = 2\n"
"# Stops to record a video.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeStopRecordVideo = 3\n"
"# Starts focus.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeFocus = 4\n"
"# Starts focal lenth. Only support those support flocal lenth cameras.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeFocalLength = 5\n"
"\n"
"uint16 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related\n"
"                      # to camera or gimbal and the connected product has multiple gimbals and cameras.\n"
"\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationType\n"
"# you can only choose one to config.\n"
"WaypointV2CameraActuatorFocusParam focusParam  # The parameters for camera focus operation. It is valid only when\n"
"                                       # ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam_operationType`` is\n"
"                                       # ``DJIWaypointV2MissionV2_DJIWaypointV2ActionActuatorCameraOperationType_Focus``\n"
"WaypointV2CameraActuatorFocalLengthParam zoomParam # The parameters for camera focus length operation. It is valid only when\n"
"                                           # ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam_operationType`` is\n"
"                                           # ``DJIWaypointV2MissionV2_DJIWaypointV2ActionActuatorCameraOperationType_FocalLength``\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2CameraActuatorFocusParam\n"
"# This class defines a camera focus operation for ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.\n"
"# The lens focus target point. When the focus mode is auto, the target point\n"
"# is the focal point. When the focus mode is manual, the target point is the zoom\n"
"# out area if the focus assistant is enabled for the manual mode.\n"
"#  The range for x and y is from 0.0 to 1.0. The point [0.0, 0.0] represents the top-left angle of the screen.\n"
"  \n"
"  float32 x # x axis focus point value.range: [0,1]\n"
"  float32 y # y axis focus point value.range: [0,1]\n"
"  uint8 regionType #focus type:0:point focus,1:rectangle focus\n"
"  float32 width #Normalized focus area width(0,1)\n"
"  float32 height # Normalized focus area height(0,1)\n"
"  uint8 retryTimes = 1\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2CameraActuatorFocalLengthParam\n"
"# This class defines a camera focal length operation for  ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.\n"
"# Focal length of zoom lens. Valid range is [``DJICamera_DJICameraOpticalZoomSpec_minFocalLength``,\n"
"# ``DJICamera_DJICameraOpticalZoomSpec_minFocalLength``] and must be a multiple of\n"
"# ``DJICamera_DJICameraOpticalZoomSpec_focalLengthStep``.\n"
"#  Only support by those camera ``DJICamera_CameraSettings_isOpticalZoomSupported`` return ``TRUE``.\n"
"  uint16 focalLength\n"
"\n"
"  uint8 retryTimes = 1\n"
;
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actuatorIndex);
      stream.next(m.DJIWaypointV2ActionActuatorCameraOperationType);
      stream.next(m.focusParam);
      stream.next(m.zoomParam);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointV2CameraActuator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::WaypointV2CameraActuator_<ContainerAllocator>& v)
  {
    s << indent << "actuatorIndex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.actuatorIndex);
    s << indent << "DJIWaypointV2ActionActuatorCameraOperationType: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DJIWaypointV2ActionActuatorCameraOperationType);
    s << indent << "focusParam: ";
    s << std::endl;
    Printer< ::dji_osdk_ros::WaypointV2CameraActuatorFocusParam_<ContainerAllocator> >::stream(s, indent + "  ", v.focusParam);
    s << indent << "zoomParam: ";
    s << std::endl;
    Printer< ::dji_osdk_ros::WaypointV2CameraActuatorFocalLengthParam_<ContainerAllocator> >::stream(s, indent + "  ", v.zoomParam);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_WAYPOINTV2CAMERAACTUATOR_H
