// Generated by gencpp from file dji_osdk_ros/GenerateWaypointV2ActionRequest.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_GENERATEWAYPOINTV2ACTIONREQUEST_H
#define DJI_OSDK_ROS_MESSAGE_GENERATEWAYPOINTV2ACTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dji_osdk_ros/WaypointV2Action.h>

namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct GenerateWaypointV2ActionRequest_
{
  typedef GenerateWaypointV2ActionRequest_<ContainerAllocator> Type;

  GenerateWaypointV2ActionRequest_()
    : actions()  {
    }
  GenerateWaypointV2ActionRequest_(const ContainerAllocator& _alloc)
    : actions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::dji_osdk_ros::WaypointV2Action_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dji_osdk_ros::WaypointV2Action_<ContainerAllocator> >::other >  _actions_type;
  _actions_type actions;





  typedef boost::shared_ptr< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenerateWaypointV2ActionRequest_

typedef ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<std::allocator<void> > GenerateWaypointV2ActionRequest;

typedef boost::shared_ptr< ::dji_osdk_ros::GenerateWaypointV2ActionRequest > GenerateWaypointV2ActionRequestPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::GenerateWaypointV2ActionRequest const> GenerateWaypointV2ActionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.actions == rhs.actions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4bc97054e3ed2f4b4ffe5d6f4908d17";
  }

  static const char* value(const ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4bc97054e3ed2f4ULL;
  static const uint64_t static_value2 = 0xb4ffe5d6f4908d17ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/GenerateWaypointV2ActionRequest";
  }

  static const char* value(const ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request\n"
"WaypointV2Action[] actions\n"
"\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2Action\n"
"# This class represents an action for ``DJIWaypointV2Mission``. It\n"
"# determines how action is performed when a waypoint mission is executed.\n"
"\n"
"# The action will be triggered when action associated executes.\n"
"# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2AssociateTriggerParam``.\n"
"uint8 DJIWaypointV2ActionTriggerTypeActionAssociated = 2\n"
"\n"
"# The action will be triggered when the aircraft flies from one waypoint to the next.\n"
"# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2TrajectoryTriggerParam``.\n"
"uint8 DJIWaypointV2ActionTriggerTypeTrajectory = 3\n"
"\n"
"# The action will be triggered when the aircraft flies between two waypoints\n"
"# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2IntervalTriggerParam``.\n"
"uint8 DJIWaypointV2ActionTriggerTypeInterval = 4\n"
"uint8 DJIWaypointV2ActionTriggerTypeSampleReachPoint = 5\n"
"\n"
"# Unknown\n"
"uint8 DJIWaypointV2ActionTriggerTypeUnknown = 255\n"
"\n"
"#contant for waypointV2ActuatorTriggerType\n"
"# The action will be executed by the camera.\n"
"# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.\n"
"uint8 DJIWaypointV2ActionActuatorTypeCamera = 1\n"
"\n"
"# The action will be executed by the gimbal.\n"
"# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2GimbalActuatorParam``.\n"
"uint8 DJIWaypointV2ActionActuatorTypeGimbal = 2\n"
"\n"
"# The action will executes by control aircraft.\n"
"# The parameters should be setting by ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.\n"
"uint8 DJIWaypointV2ActionActuatorTypeAircraftControl = 4\n"
"\n"
"# Unknown actuator type.\n"
"uint8 DJIWaypointV2ActionActuatorTypeUnknown = 255\n"
"\n"
"uint16 actionId # The ID of Action.\n"
"\n"
"uint8 waypointV2ActionTriggerType\n"
"uint8 waypointV2ACtionActuatorType\n"
"\n"
"# The trigger of action.You can only choose one to config\n"
"WaypointV2AssociateTrigger waypointV2AssociateTrigger\n"
"WaypointV2IntervalTrigger waypointV2IntervalTrigger\n"
"WaypointV2TrajectoryTrigger waypointV2TrajectoryTrigger\n"
"WaypointV2SampleReachPointTrigger waypointV2SampleReachPointTrigger\n"
"\n"
" # The actuator of action.You can only choose one to config\n"
"WaypointV2CameraActuator waypointV2CameraActuator\n"
"WaypointV2GimbalActuator waypointV2GimbalActuator\n"
"WaypointV2AircraftControlActuator waypointV2AircraftControlActuator\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2AssociateTrigger\n"
"#contant for actionAssociatedType\n"
"uint8 DJIWaypointV2TriggerAssociatedTimingTypeSimultaneously = 1  # The trigger starts simultaneously with the trigger that is associated.\n"
"uint8 DJIWaypointV2TriggerAssociatedTimingTypeAfterFinised = 2    # The trigger starts after the trigger associated has finished.\n"
"uint8 DJIWaypointV2TriggerAssociatedTimingTypeUnknown = 255       # Unkown timing type.\n"
"\n"
"uint8 actionAssociatedType  # The type of assciate trigger.\n"
"uint8 waitingTime           # Waiting time in seconds after ActionTrigger starts.\n"
"uint16 actionIdAssociated # Associated action ID.\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2IntervalTrigger\n"
"#constant for actionIntervalType\n"
"uint8 DJIWaypointV2ActionIntervalTypeTime     = 1  # The action will be repeated after a particular period of time.\n"
"uint8 DJIWaypointV2ActionIntervalTypeDistance = 2  # The action will be repeated after a particular distance.\n"
"uint8 DJIWaypointV2ActionIntervalTypeUnknown  = 255 # Unknown action trigger type.\n"
"\n"
"uint16 startIndex # It determines the index of the waypoint at which the trigger starts.\n"
"# If the  ``DJIWaypointV2Action_DJIWaypointV2IntervalTriggerParam_actionIntervalType``\n"
"# is ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_Time``\n"
"# The time interval in seconds when two action are executed as the aircraft moves\n"
"# from the current waypoint to the next waypoint.\n"
"# If the ``DJIWaypointV2Action_DJIWaypointV2IntervalTriggerParam_actionIntervalType`` is\n"
"# ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_Distance``\n"
"# The distance interval in meters when two action are executed as the aircraft moves\n"
"# from the current waypoint to the next waypoint.\n"
"uint16 interval\n"
"uint8 actionIntervalType # The type of interval trigger.\n"
"                         # See ``DJIWaypointV2MissionV2_DJIWaypointV2ActionIntervalType``.\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2TrajectoryTrigger\n"
"# This class represents a trajectory trigger action when should be trigger.\n"
"\n"
"uint16 startIndex # It determines the index of the waypoint at which the trigger starts.\n"
"uint16 endIndex   # It determines the waypoint when the trigger stops.\n"
"\n"
"\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2SampleReachPointTrigger\n"
"uint16 waypointIndex # It determines the index of the waypoint at which the action will be triggered.\n"
"uint16 terminateNum\n"
"\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2CameraActuator\n"
"# This determines how the camera will be performed when a waypoint mission is executing.\n"
"#constant for DJIWaypointV2ActionActuatorCameraOperationType\n"
"# Starts to shoot a photo.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeTakePhoto = 1\n"
"# Starts to record a video.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeStartRecordVideo = 2\n"
"# Stops to record a video.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeStopRecordVideo = 3\n"
"# Starts focus.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeFocus = 4\n"
"# Starts focal lenth. Only support those support flocal lenth cameras.\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationTypeFocalLength = 5\n"
"\n"
"uint16 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related\n"
"                      # to camera or gimbal and the connected product has multiple gimbals and cameras.\n"
"\n"
"uint16 DJIWaypointV2ActionActuatorCameraOperationType\n"
"# you can only choose one to config.\n"
"WaypointV2CameraActuatorFocusParam focusParam  # The parameters for camera focus operation. It is valid only when\n"
"                                       # ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam_operationType`` is\n"
"                                       # ``DJIWaypointV2MissionV2_DJIWaypointV2ActionActuatorCameraOperationType_Focus``\n"
"WaypointV2CameraActuatorFocalLengthParam zoomParam # The parameters for camera focus length operation. It is valid only when\n"
"                                           # ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam_operationType`` is\n"
"                                           # ``DJIWaypointV2MissionV2_DJIWaypointV2ActionActuatorCameraOperationType_FocalLength``\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2CameraActuatorFocusParam\n"
"# This class defines a camera focus operation for ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.\n"
"# The lens focus target point. When the focus mode is auto, the target point\n"
"# is the focal point. When the focus mode is manual, the target point is the zoom\n"
"# out area if the focus assistant is enabled for the manual mode.\n"
"#  The range for x and y is from 0.0 to 1.0. The point [0.0, 0.0] represents the top-left angle of the screen.\n"
"  \n"
"  float32 x # x axis focus point value.range: [0,1]\n"
"  float32 y # y axis focus point value.range: [0,1]\n"
"  uint8 regionType #focus type:0:point focus,1:rectangle focus\n"
"  float32 width #Normalized focus area width(0,1)\n"
"  float32 height # Normalized focus area height(0,1)\n"
"  uint8 retryTimes = 1\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2CameraActuatorFocalLengthParam\n"
"# This class defines a camera focal length operation for  ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.\n"
"# Focal length of zoom lens. Valid range is [``DJICamera_DJICameraOpticalZoomSpec_minFocalLength``,\n"
"# ``DJICamera_DJICameraOpticalZoomSpec_minFocalLength``] and must be a multiple of\n"
"# ``DJICamera_DJICameraOpticalZoomSpec_focalLengthStep``.\n"
"#  Only support by those camera ``DJICamera_CameraSettings_isOpticalZoomSupported`` return ``TRUE``.\n"
"  uint16 focalLength\n"
"\n"
"  uint8 retryTimes = 1\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2GimbalActuator\n"
"# gimbal actuator will be performed when a waypoint mission is executed.\n"
"#constant for DJIWaypointV2ActionActuatorGimbalOperationType\n"
"# Rotates the gimbal. Only valid when the trigger type is\n"
"# ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_ReachPoint``.\n"
"uint8 DJIWaypointV2ActionActuatorGimbalOperationTypeRotateGimbal = 1\n"
"# Unknown\n"
"uint8 DJIWaypointV2ActionActuatorGimbalOperationTypeUnknown = 255\n"
"\n"
"uint8 DJIWaypointV2ActionActuatorGimbalOperationType\n"
"uint16 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related\n"
"                      # to camera or gimbal and the connected product has multiple gimbals and cameras.\n"
"WaypointV2GimbalActuatorRotationParam waypointV2GimbalActuatorRotationParam # The operation type of gimbal actuator.\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2GimbalActuatorRotationParam\n"
"  int16 x             # gimbal roll angle,  unit: 0.1 deg,range:[-3600, 3600]*/\n"
"  int16 y             # gimbal pitch angle, unit: 0.1 deg,range:[-3600, 3600]*/\n"
"  int16 z             # gimbal yaw angle,   unit: 0.1 deg,range:[-3600, 3600]*/\n"
"  uint8 ctrl_mode     # 0: absolute position control, 1:relative position control*/\n"
"  uint8 rollCmdIgnore # 0: roll command normal,  1: roll command ignore*/\n"
"  uint8 pitchCmdIgnore# 0: pitch command normal,  1: pitch command ignore*/\n"
"  uint8 yawCmdIgnore  # 0: yaw command normal,  1: yaw command ignore*/\n"
"  uint8 absYawModeRef # 0: absoluate rotate yaw relative to aircraft,\n"
"                      #  1: absoluate rotate yaw relative to North*/\n"
"  uint8 duationTime    # 0: rotate time,unit:0.1s, range[1,255]*/\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2AircraftControlActuator\n"
"# Parameters for aircraft control actuator. It is valid only when the\n"
"# ``DJIWaypointV2Action_DJIWaypointV2Actuator_type`` is\n"
"# ``DJIWaypointV2MissionV2_DJIWaypointV2ActionActuatorType_AircraftControl``.\n"
"#contant for DJIWaypointV2ActionActuatorAircraftControlOperationType\n"
"# Rotates the aircraft's yaw.\n"
"uint8 DJIWaypointV2ActionActuatorAircraftControlOperationTypeRotateYaw = 1\n"
"# Keeps the aircraft stop flying or start flying.\n"
"uint8 DJIWaypointV2ActionActuatorAircraftControlOperationTypeFlyingControl = 2\n"
"# Unknown\n"
"uint8 DJIWaypointV2ActionActuatorAircraftControlOperationTypeUnknown = 255\n"
"\n"
"uint8 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related\n"
"                      # to camera or gimbal and the connected product has multiple gimbals and cameras.\n"
"uint16 DJIWaypointV2ActionActuatorAircraftControlOperationType \n"
"WaypointV2AircraftControlActuatorFlying waypointV2AircraftControlActuatorFlying\n"
"WaypointV2AircraftControlActuatorRotateHeading waypointV2AircraftControlActuatorRotateHeading\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2AircraftControlActuatorFlying\n"
"# This class defines if the aircraft starts or stops the flight.s.\n"
"uint8  isStartFlying  # Determines the aircraft start flying or stop flying.\n"
"                        # ``TRUE`` for the aircraft to start flying.\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2AircraftControlActuatorRotateHeading\n"
"# This class defines how the aircraft rotates on the yaw axis.\n"
"  uint8 isRelative # Determines the aircraft rotate heading relative.\n"
"                     # if ``TRUE``, when the aircraft is rotating, relative to the current angle.\n"
"  float32 yaw # Determines the direction how aircraft changes its heading.\n"
;
  }

  static const char* value(const ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenerateWaypointV2ActionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::GenerateWaypointV2ActionRequest_<ContainerAllocator>& v)
  {
    s << indent << "actions[]" << std::endl;
    for (size_t i = 0; i < v.actions.size(); ++i)
    {
      s << indent << "  actions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dji_osdk_ros::WaypointV2Action_<ContainerAllocator> >::stream(s, indent + "    ", v.actions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_GENERATEWAYPOINTV2ACTIONREQUEST_H
