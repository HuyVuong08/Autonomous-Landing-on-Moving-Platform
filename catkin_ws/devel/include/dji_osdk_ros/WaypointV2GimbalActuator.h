// Generated by gencpp from file dji_osdk_ros/WaypointV2GimbalActuator.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_WAYPOINTV2GIMBALACTUATOR_H
#define DJI_OSDK_ROS_MESSAGE_WAYPOINTV2GIMBALACTUATOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dji_osdk_ros/WaypointV2GimbalActuatorRotationParam.h>

namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct WaypointV2GimbalActuator_
{
  typedef WaypointV2GimbalActuator_<ContainerAllocator> Type;

  WaypointV2GimbalActuator_()
    : DJIWaypointV2ActionActuatorGimbalOperationType(0)
    , actuatorIndex(0)
    , waypointV2GimbalActuatorRotationParam()  {
    }
  WaypointV2GimbalActuator_(const ContainerAllocator& _alloc)
    : DJIWaypointV2ActionActuatorGimbalOperationType(0)
    , actuatorIndex(0)
    , waypointV2GimbalActuatorRotationParam(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _DJIWaypointV2ActionActuatorGimbalOperationType_type;
  _DJIWaypointV2ActionActuatorGimbalOperationType_type DJIWaypointV2ActionActuatorGimbalOperationType;

   typedef uint16_t _actuatorIndex_type;
  _actuatorIndex_type actuatorIndex;

   typedef  ::dji_osdk_ros::WaypointV2GimbalActuatorRotationParam_<ContainerAllocator>  _waypointV2GimbalActuatorRotationParam_type;
  _waypointV2GimbalActuatorRotationParam_type waypointV2GimbalActuatorRotationParam;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DJIWaypointV2ActionActuatorGimbalOperationTypeRotateGimbal)
  #undef DJIWaypointV2ActionActuatorGimbalOperationTypeRotateGimbal
#endif
#if defined(_WIN32) && defined(DJIWaypointV2ActionActuatorGimbalOperationTypeUnknown)
  #undef DJIWaypointV2ActionActuatorGimbalOperationTypeUnknown
#endif

  enum {
    DJIWaypointV2ActionActuatorGimbalOperationTypeRotateGimbal = 1u,
    DJIWaypointV2ActionActuatorGimbalOperationTypeUnknown = 255u,
  };


  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointV2GimbalActuator_

typedef ::dji_osdk_ros::WaypointV2GimbalActuator_<std::allocator<void> > WaypointV2GimbalActuator;

typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2GimbalActuator > WaypointV2GimbalActuatorPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2GimbalActuator const> WaypointV2GimbalActuatorConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator2> & rhs)
{
  return lhs.DJIWaypointV2ActionActuatorGimbalOperationType == rhs.DJIWaypointV2ActionActuatorGimbalOperationType &&
    lhs.actuatorIndex == rhs.actuatorIndex &&
    lhs.waypointV2GimbalActuatorRotationParam == rhs.waypointV2GimbalActuatorRotationParam;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8bcaee6b26f8e0a2c23b117c342971ca";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8bcaee6b26f8e0a2ULL;
  static const uint64_t static_value2 = 0xc23b117c342971caULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/WaypointV2GimbalActuator";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# gimbal actuator will be performed when a waypoint mission is executed.\n"
"#constant for DJIWaypointV2ActionActuatorGimbalOperationType\n"
"# Rotates the gimbal. Only valid when the trigger type is\n"
"# ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_ReachPoint``.\n"
"uint8 DJIWaypointV2ActionActuatorGimbalOperationTypeRotateGimbal = 1\n"
"# Unknown\n"
"uint8 DJIWaypointV2ActionActuatorGimbalOperationTypeUnknown = 255\n"
"\n"
"uint8 DJIWaypointV2ActionActuatorGimbalOperationType\n"
"uint16 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related\n"
"                      # to camera or gimbal and the connected product has multiple gimbals and cameras.\n"
"WaypointV2GimbalActuatorRotationParam waypointV2GimbalActuatorRotationParam # The operation type of gimbal actuator.\n"
"================================================================================\n"
"MSG: dji_osdk_ros/WaypointV2GimbalActuatorRotationParam\n"
"  int16 x             # gimbal roll angle,  unit: 0.1 deg,range:[-3600, 3600]*/\n"
"  int16 y             # gimbal pitch angle, unit: 0.1 deg,range:[-3600, 3600]*/\n"
"  int16 z             # gimbal yaw angle,   unit: 0.1 deg,range:[-3600, 3600]*/\n"
"  uint8 ctrl_mode     # 0: absolute position control, 1:relative position control*/\n"
"  uint8 rollCmdIgnore # 0: roll command normal,  1: roll command ignore*/\n"
"  uint8 pitchCmdIgnore# 0: pitch command normal,  1: pitch command ignore*/\n"
"  uint8 yawCmdIgnore  # 0: yaw command normal,  1: yaw command ignore*/\n"
"  uint8 absYawModeRef # 0: absoluate rotate yaw relative to aircraft,\n"
"                      #  1: absoluate rotate yaw relative to North*/\n"
"  uint8 duationTime    # 0: rotate time,unit:0.1s, range[1,255]*/\n"
;
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DJIWaypointV2ActionActuatorGimbalOperationType);
      stream.next(m.actuatorIndex);
      stream.next(m.waypointV2GimbalActuatorRotationParam);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointV2GimbalActuator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::WaypointV2GimbalActuator_<ContainerAllocator>& v)
  {
    s << indent << "DJIWaypointV2ActionActuatorGimbalOperationType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DJIWaypointV2ActionActuatorGimbalOperationType);
    s << indent << "actuatorIndex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.actuatorIndex);
    s << indent << "waypointV2GimbalActuatorRotationParam: ";
    s << std::endl;
    Printer< ::dji_osdk_ros::WaypointV2GimbalActuatorRotationParam_<ContainerAllocator> >::stream(s, indent + "  ", v.waypointV2GimbalActuatorRotationParam);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_WAYPOINTV2GIMBALACTUATOR_H
