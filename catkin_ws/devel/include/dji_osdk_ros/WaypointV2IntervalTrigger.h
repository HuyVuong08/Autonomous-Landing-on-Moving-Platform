// Generated by gencpp from file dji_osdk_ros/WaypointV2IntervalTrigger.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_WAYPOINTV2INTERVALTRIGGER_H
#define DJI_OSDK_ROS_MESSAGE_WAYPOINTV2INTERVALTRIGGER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct WaypointV2IntervalTrigger_
{
  typedef WaypointV2IntervalTrigger_<ContainerAllocator> Type;

  WaypointV2IntervalTrigger_()
    : startIndex(0)
    , interval(0)
    , actionIntervalType(0)  {
    }
  WaypointV2IntervalTrigger_(const ContainerAllocator& _alloc)
    : startIndex(0)
    , interval(0)
    , actionIntervalType(0)  {
  (void)_alloc;
    }



   typedef uint16_t _startIndex_type;
  _startIndex_type startIndex;

   typedef uint16_t _interval_type;
  _interval_type interval;

   typedef uint8_t _actionIntervalType_type;
  _actionIntervalType_type actionIntervalType;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DJIWaypointV2ActionIntervalTypeTime)
  #undef DJIWaypointV2ActionIntervalTypeTime
#endif
#if defined(_WIN32) && defined(DJIWaypointV2ActionIntervalTypeDistance)
  #undef DJIWaypointV2ActionIntervalTypeDistance
#endif
#if defined(_WIN32) && defined(DJIWaypointV2ActionIntervalTypeUnknown)
  #undef DJIWaypointV2ActionIntervalTypeUnknown
#endif

  enum {
    DJIWaypointV2ActionIntervalTypeTime = 1u,
    DJIWaypointV2ActionIntervalTypeDistance = 2u,
    DJIWaypointV2ActionIntervalTypeUnknown = 255u,
  };


  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointV2IntervalTrigger_

typedef ::dji_osdk_ros::WaypointV2IntervalTrigger_<std::allocator<void> > WaypointV2IntervalTrigger;

typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2IntervalTrigger > WaypointV2IntervalTriggerPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2IntervalTrigger const> WaypointV2IntervalTriggerConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator2> & rhs)
{
  return lhs.startIndex == rhs.startIndex &&
    lhs.interval == rhs.interval &&
    lhs.actionIntervalType == rhs.actionIntervalType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a737930d3da7d390475e0a354220c42";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a737930d3da7d39ULL;
  static const uint64_t static_value2 = 0x0475e0a354220c42ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/WaypointV2IntervalTrigger";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#constant for actionIntervalType\n"
"uint8 DJIWaypointV2ActionIntervalTypeTime     = 1  # The action will be repeated after a particular period of time.\n"
"uint8 DJIWaypointV2ActionIntervalTypeDistance = 2  # The action will be repeated after a particular distance.\n"
"uint8 DJIWaypointV2ActionIntervalTypeUnknown  = 255 # Unknown action trigger type.\n"
"\n"
"uint16 startIndex # It determines the index of the waypoint at which the trigger starts.\n"
"# If the  ``DJIWaypointV2Action_DJIWaypointV2IntervalTriggerParam_actionIntervalType``\n"
"# is ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_Time``\n"
"# The time interval in seconds when two action are executed as the aircraft moves\n"
"# from the current waypoint to the next waypoint.\n"
"# If the ``DJIWaypointV2Action_DJIWaypointV2IntervalTriggerParam_actionIntervalType`` is\n"
"# ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_Distance``\n"
"# The distance interval in meters when two action are executed as the aircraft moves\n"
"# from the current waypoint to the next waypoint.\n"
"uint16 interval\n"
"uint8 actionIntervalType # The type of interval trigger.\n"
"                         # See ``DJIWaypointV2MissionV2_DJIWaypointV2ActionIntervalType``.\n"
;
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.startIndex);
      stream.next(m.interval);
      stream.next(m.actionIntervalType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointV2IntervalTrigger_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::WaypointV2IntervalTrigger_<ContainerAllocator>& v)
  {
    s << indent << "startIndex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.startIndex);
    s << indent << "interval: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.interval);
    s << indent << "actionIntervalType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.actionIntervalType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_WAYPOINTV2INTERVALTRIGGER_H
