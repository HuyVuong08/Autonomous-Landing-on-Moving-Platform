// Generated by gencpp from file dji_osdk_ros/MissionWaypointAction.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_MISSIONWAYPOINTACTION_H
#define DJI_OSDK_ROS_MESSAGE_MISSIONWAYPOINTACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct MissionWaypointAction_
{
  typedef MissionWaypointAction_<ContainerAllocator> Type;

  MissionWaypointAction_()
    : action_repeat(0)
    , command_list()
    , command_parameter()  {
      command_list.assign(0);

      command_parameter.assign(0);
  }
  MissionWaypointAction_(const ContainerAllocator& _alloc)
    : action_repeat(0)
    , command_list()
    , command_parameter()  {
  (void)_alloc;
      command_list.assign(0);

      command_parameter.assign(0);
  }



   typedef uint8_t _action_repeat_type;
  _action_repeat_type action_repeat;

   typedef boost::array<uint8_t, 16>  _command_list_type;
  _command_list_type command_list;

   typedef boost::array<uint16_t, 16>  _command_parameter_type;
  _command_parameter_type command_parameter;





  typedef boost::shared_ptr< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> const> ConstPtr;

}; // struct MissionWaypointAction_

typedef ::dji_osdk_ros::MissionWaypointAction_<std::allocator<void> > MissionWaypointAction;

typedef boost::shared_ptr< ::dji_osdk_ros::MissionWaypointAction > MissionWaypointActionPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::MissionWaypointAction const> MissionWaypointActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator2> & rhs)
{
  return lhs.action_repeat == rhs.action_repeat &&
    lhs.command_list == rhs.command_list &&
    lhs.command_parameter == rhs.command_parameter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "940a2c85852b1259dcafa1d9b9ce78fd";
  }

  static const char* value(const ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x940a2c85852b1259ULL;
  static const uint64_t static_value2 = 0xdcafa1d9b9ce78fdULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/MissionWaypointAction";
  }

  static const char* value(const ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# action_repeat\n"
"# lower 4 bit: Total number of actions\n"
"# hight 4 bit: Total running times\n"
"uint8 action_repeat\n"
"uint8[16] command_list\n"
"uint16[16] command_parameter\n"
;
  }

  static const char* value(const ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_repeat);
      stream.next(m.command_list);
      stream.next(m.command_parameter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionWaypointAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::MissionWaypointAction_<ContainerAllocator>& v)
  {
    s << indent << "action_repeat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action_repeat);
    s << indent << "command_list[]" << std::endl;
    for (size_t i = 0; i < v.command_list.size(); ++i)
    {
      s << indent << "  command_list[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.command_list[i]);
    }
    s << indent << "command_parameter[]" << std::endl;
    for (size_t i = 0; i < v.command_parameter.size(); ++i)
    {
      s << indent << "  command_parameter[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.command_parameter[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_MISSIONWAYPOINTACTION_H
