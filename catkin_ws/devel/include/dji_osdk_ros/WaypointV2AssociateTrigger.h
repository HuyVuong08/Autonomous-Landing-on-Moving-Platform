// Generated by gencpp from file dji_osdk_ros/WaypointV2AssociateTrigger.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_WAYPOINTV2ASSOCIATETRIGGER_H
#define DJI_OSDK_ROS_MESSAGE_WAYPOINTV2ASSOCIATETRIGGER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct WaypointV2AssociateTrigger_
{
  typedef WaypointV2AssociateTrigger_<ContainerAllocator> Type;

  WaypointV2AssociateTrigger_()
    : actionAssociatedType(0)
    , waitingTime(0)
    , actionIdAssociated(0)  {
    }
  WaypointV2AssociateTrigger_(const ContainerAllocator& _alloc)
    : actionAssociatedType(0)
    , waitingTime(0)
    , actionIdAssociated(0)  {
  (void)_alloc;
    }



   typedef uint8_t _actionAssociatedType_type;
  _actionAssociatedType_type actionAssociatedType;

   typedef uint8_t _waitingTime_type;
  _waitingTime_type waitingTime;

   typedef uint16_t _actionIdAssociated_type;
  _actionIdAssociated_type actionIdAssociated;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DJIWaypointV2TriggerAssociatedTimingTypeSimultaneously)
  #undef DJIWaypointV2TriggerAssociatedTimingTypeSimultaneously
#endif
#if defined(_WIN32) && defined(DJIWaypointV2TriggerAssociatedTimingTypeAfterFinised)
  #undef DJIWaypointV2TriggerAssociatedTimingTypeAfterFinised
#endif
#if defined(_WIN32) && defined(DJIWaypointV2TriggerAssociatedTimingTypeUnknown)
  #undef DJIWaypointV2TriggerAssociatedTimingTypeUnknown
#endif

  enum {
    DJIWaypointV2TriggerAssociatedTimingTypeSimultaneously = 1u,
    DJIWaypointV2TriggerAssociatedTimingTypeAfterFinised = 2u,
    DJIWaypointV2TriggerAssociatedTimingTypeUnknown = 255u,
  };


  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointV2AssociateTrigger_

typedef ::dji_osdk_ros::WaypointV2AssociateTrigger_<std::allocator<void> > WaypointV2AssociateTrigger;

typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2AssociateTrigger > WaypointV2AssociateTriggerPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::WaypointV2AssociateTrigger const> WaypointV2AssociateTriggerConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator2> & rhs)
{
  return lhs.actionAssociatedType == rhs.actionAssociatedType &&
    lhs.waitingTime == rhs.waitingTime &&
    lhs.actionIdAssociated == rhs.actionIdAssociated;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd18cc058d8c8b002f1666933510bde3";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd18cc058d8c8b00ULL;
  static const uint64_t static_value2 = 0x2f1666933510bde3ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/WaypointV2AssociateTrigger";
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#contant for actionAssociatedType\n"
"uint8 DJIWaypointV2TriggerAssociatedTimingTypeSimultaneously = 1  # The trigger starts simultaneously with the trigger that is associated.\n"
"uint8 DJIWaypointV2TriggerAssociatedTimingTypeAfterFinised = 2    # The trigger starts after the trigger associated has finished.\n"
"uint8 DJIWaypointV2TriggerAssociatedTimingTypeUnknown = 255       # Unkown timing type.\n"
"\n"
"uint8 actionAssociatedType  # The type of assciate trigger.\n"
"uint8 waitingTime           # Waiting time in seconds after ActionTrigger starts.\n"
"uint16 actionIdAssociated # Associated action ID.\n"
;
  }

  static const char* value(const ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actionAssociatedType);
      stream.next(m.waitingTime);
      stream.next(m.actionIdAssociated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointV2AssociateTrigger_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::WaypointV2AssociateTrigger_<ContainerAllocator>& v)
  {
    s << indent << "actionAssociatedType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.actionAssociatedType);
    s << indent << "waitingTime: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waitingTime);
    s << indent << "actionIdAssociated: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.actionIdAssociated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_WAYPOINTV2ASSOCIATETRIGGER_H
