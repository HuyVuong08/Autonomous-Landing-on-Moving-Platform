// Generated by gencpp from file dji_osdk_ros/SmartBatteryState.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_SMARTBATTERYSTATE_H
#define DJI_OSDK_ROS_MESSAGE_SMARTBATTERYSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct SmartBatteryState_
{
  typedef SmartBatteryState_<ContainerAllocator> Type;

  SmartBatteryState_()
    : cellBreak(0)
    , selfCheckError(0)
    , batteryClosedReason(0)
    , batSOHState(0)
    , maxCycleLimit(0)
    , batteryCommunicationAbnormal(0)
    , hasCellBreak(0)
    , heatState(0)  {
    }
  SmartBatteryState_(const ContainerAllocator& _alloc)
    : cellBreak(0)
    , selfCheckError(0)
    , batteryClosedReason(0)
    , batSOHState(0)
    , maxCycleLimit(0)
    , batteryCommunicationAbnormal(0)
    , hasCellBreak(0)
    , heatState(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cellBreak_type;
  _cellBreak_type cellBreak;

   typedef uint8_t _selfCheckError_type;
  _selfCheckError_type selfCheckError;

   typedef uint8_t _batteryClosedReason_type;
  _batteryClosedReason_type batteryClosedReason;

   typedef uint8_t _batSOHState_type;
  _batSOHState_type batSOHState;

   typedef uint8_t _maxCycleLimit_type;
  _maxCycleLimit_type maxCycleLimit;

   typedef uint8_t _batteryCommunicationAbnormal_type;
  _batteryCommunicationAbnormal_type batteryCommunicationAbnormal;

   typedef uint8_t _hasCellBreak_type;
  _hasCellBreak_type hasCellBreak;

   typedef uint8_t _heatState_type;
  _heatState_type heatState;





  typedef boost::shared_ptr< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> const> ConstPtr;

}; // struct SmartBatteryState_

typedef ::dji_osdk_ros::SmartBatteryState_<std::allocator<void> > SmartBatteryState;

typedef boost::shared_ptr< ::dji_osdk_ros::SmartBatteryState > SmartBatteryStatePtr;
typedef boost::shared_ptr< ::dji_osdk_ros::SmartBatteryState const> SmartBatteryStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator2> & rhs)
{
  return lhs.cellBreak == rhs.cellBreak &&
    lhs.selfCheckError == rhs.selfCheckError &&
    lhs.batteryClosedReason == rhs.batteryClosedReason &&
    lhs.batSOHState == rhs.batSOHState &&
    lhs.maxCycleLimit == rhs.maxCycleLimit &&
    lhs.batteryCommunicationAbnormal == rhs.batteryCommunicationAbnormal &&
    lhs.hasCellBreak == rhs.hasCellBreak &&
    lhs.heatState == rhs.heatState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a0ddaf2e9bc1f4b0e5e1567435f698e";
  }

  static const char* value(const ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a0ddaf2e9bc1f4bULL;
  static const uint64_t static_value2 = 0x0e5e1567435f698eULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/SmartBatteryState";
  }

  static const char* value(const ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 cellBreak                  # 0:normal;other:Undervoltage core index(0x01-0x1F)\n"
"uint8 selfCheckError             # enum-type: DJISmartBatterySelfCheck\n"
"uint8 batteryClosedReason        # enum-type: DJI_BETTERY_CLOSED_REASON\n"
"uint8 batSOHState                # enum-type: DJISmartBatterySohState*/\n"
"uint8 maxCycleLimit              # APP:cycle_limit*10*/\n"
"uint8 batteryCommunicationAbnormal\n"
"uint8 hasCellBreak\n"
"uint8 heatState                  # enum-type: DJISmartBatteryHeatState\n"
;
  }

  static const char* value(const ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cellBreak);
      stream.next(m.selfCheckError);
      stream.next(m.batteryClosedReason);
      stream.next(m.batSOHState);
      stream.next(m.maxCycleLimit);
      stream.next(m.batteryCommunicationAbnormal);
      stream.next(m.hasCellBreak);
      stream.next(m.heatState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SmartBatteryState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::SmartBatteryState_<ContainerAllocator>& v)
  {
    s << indent << "cellBreak: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cellBreak);
    s << indent << "selfCheckError: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.selfCheckError);
    s << indent << "batteryClosedReason: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryClosedReason);
    s << indent << "batSOHState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batSOHState);
    s << indent << "maxCycleLimit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.maxCycleLimit);
    s << indent << "batteryCommunicationAbnormal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryCommunicationAbnormal);
    s << indent << "hasCellBreak: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hasCellBreak);
    s << indent << "heatState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heatState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_SMARTBATTERYSTATE_H
