// Generated by gencpp from file dji_osdk_ros/BatteryWholeInfo.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_BATTERYWHOLEINFO_H
#define DJI_OSDK_ROS_MESSAGE_BATTERYWHOLEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dji_osdk_ros/BatteryState.h>

namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct BatteryWholeInfo_
{
  typedef BatteryWholeInfo_<ContainerAllocator> Type;

  BatteryWholeInfo_()
    : remainFlyTime(0)
    , goHomeNeedTime(0)
    , landNeedTime(0)
    , goHomeNeedCapacity(0)
    , landNeedCapacity(0)
    , safeFlyRadius(0.0)
    , capacityConsumeSpeed(0.0)
    , batteryState()
    , goHomeCountDownState(0)
    , gohomeCountDownvalue(0)
    , voltage(0)
    , batteryCapacityPercentage(0)
    , lowBatteryAlarmThreshold(0)
    , lowBatteryAlarmEnable(0)
    , seriousLowBatteryAlarmThreshold(0)
    , seriousLowBatteryAlarmEnable(0)  {
    }
  BatteryWholeInfo_(const ContainerAllocator& _alloc)
    : remainFlyTime(0)
    , goHomeNeedTime(0)
    , landNeedTime(0)
    , goHomeNeedCapacity(0)
    , landNeedCapacity(0)
    , safeFlyRadius(0.0)
    , capacityConsumeSpeed(0.0)
    , batteryState(_alloc)
    , goHomeCountDownState(0)
    , gohomeCountDownvalue(0)
    , voltage(0)
    , batteryCapacityPercentage(0)
    , lowBatteryAlarmThreshold(0)
    , lowBatteryAlarmEnable(0)
    , seriousLowBatteryAlarmThreshold(0)
    , seriousLowBatteryAlarmEnable(0)  {
  (void)_alloc;
    }



   typedef uint16_t _remainFlyTime_type;
  _remainFlyTime_type remainFlyTime;

   typedef uint16_t _goHomeNeedTime_type;
  _goHomeNeedTime_type goHomeNeedTime;

   typedef uint16_t _landNeedTime_type;
  _landNeedTime_type landNeedTime;

   typedef uint16_t _goHomeNeedCapacity_type;
  _goHomeNeedCapacity_type goHomeNeedCapacity;

   typedef uint16_t _landNeedCapacity_type;
  _landNeedCapacity_type landNeedCapacity;

   typedef float _safeFlyRadius_type;
  _safeFlyRadius_type safeFlyRadius;

   typedef float _capacityConsumeSpeed_type;
  _capacityConsumeSpeed_type capacityConsumeSpeed;

   typedef  ::dji_osdk_ros::BatteryState_<ContainerAllocator>  _batteryState_type;
  _batteryState_type batteryState;

   typedef uint8_t _goHomeCountDownState_type;
  _goHomeCountDownState_type goHomeCountDownState;

   typedef uint8_t _gohomeCountDownvalue_type;
  _gohomeCountDownvalue_type gohomeCountDownvalue;

   typedef uint16_t _voltage_type;
  _voltage_type voltage;

   typedef uint8_t _batteryCapacityPercentage_type;
  _batteryCapacityPercentage_type batteryCapacityPercentage;

   typedef uint8_t _lowBatteryAlarmThreshold_type;
  _lowBatteryAlarmThreshold_type lowBatteryAlarmThreshold;

   typedef uint8_t _lowBatteryAlarmEnable_type;
  _lowBatteryAlarmEnable_type lowBatteryAlarmEnable;

   typedef uint8_t _seriousLowBatteryAlarmThreshold_type;
  _seriousLowBatteryAlarmThreshold_type seriousLowBatteryAlarmThreshold;

   typedef uint8_t _seriousLowBatteryAlarmEnable_type;
  _seriousLowBatteryAlarmEnable_type seriousLowBatteryAlarmEnable;





  typedef boost::shared_ptr< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryWholeInfo_

typedef ::dji_osdk_ros::BatteryWholeInfo_<std::allocator<void> > BatteryWholeInfo;

typedef boost::shared_ptr< ::dji_osdk_ros::BatteryWholeInfo > BatteryWholeInfoPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::BatteryWholeInfo const> BatteryWholeInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator2> & rhs)
{
  return lhs.remainFlyTime == rhs.remainFlyTime &&
    lhs.goHomeNeedTime == rhs.goHomeNeedTime &&
    lhs.landNeedTime == rhs.landNeedTime &&
    lhs.goHomeNeedCapacity == rhs.goHomeNeedCapacity &&
    lhs.landNeedCapacity == rhs.landNeedCapacity &&
    lhs.safeFlyRadius == rhs.safeFlyRadius &&
    lhs.capacityConsumeSpeed == rhs.capacityConsumeSpeed &&
    lhs.batteryState == rhs.batteryState &&
    lhs.goHomeCountDownState == rhs.goHomeCountDownState &&
    lhs.gohomeCountDownvalue == rhs.gohomeCountDownvalue &&
    lhs.voltage == rhs.voltage &&
    lhs.batteryCapacityPercentage == rhs.batteryCapacityPercentage &&
    lhs.lowBatteryAlarmThreshold == rhs.lowBatteryAlarmThreshold &&
    lhs.lowBatteryAlarmEnable == rhs.lowBatteryAlarmEnable &&
    lhs.seriousLowBatteryAlarmThreshold == rhs.seriousLowBatteryAlarmThreshold &&
    lhs.seriousLowBatteryAlarmEnable == rhs.seriousLowBatteryAlarmEnable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator1> & lhs, const ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e822abf802642ce971495ff2b95946b";
  }

  static const char* value(const ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e822abf802642ceULL;
  static const uint64_t static_value2 = 0x971495ff2b95946bULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/BatteryWholeInfo";
  }

  static const char* value(const ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16  remainFlyTime             # remain fly time(s)\n"
"uint16  goHomeNeedTime            # Time required for the gohome flight (s)\n"
"uint16  landNeedTime              # Time required for the land flight (s).max value:100*/\n"
"uint16  goHomeNeedCapacity        # Capacity required for the gohome flight (%).max value:100*/\n"
"uint16  landNeedCapacity          # Capacity required for the land flight (%).max value:100*/\n"
"float32 safeFlyRadius             # Safe flight area radius (m)*/\n"
"float32 capacityConsumeSpeed      # (mAh/sec)*/\n"
"BatteryState batteryState\n"
"uint8   goHomeCountDownState      # Countdown status of smart battery gohome\n"
"                                   # 0/2:not in gohome state\n"
"                                   # 1  :in gohome state\n"
"                                   #\n"
"uint8   gohomeCountDownvalue      # uint:s.max value:10\n"
"uint16  voltage                   # mv\n"
"uint8   batteryCapacityPercentage # uint:%.max value:100\n"
"uint8   lowBatteryAlarmThreshold\n"
"uint8   lowBatteryAlarmEnable\n"
"uint8   seriousLowBatteryAlarmThreshold\n"
"uint8   seriousLowBatteryAlarmEnable  \n"
"================================================================================\n"
"MSG: dji_osdk_ros/BatteryState\n"
"uint8 voltageNotSafety # Generally caused by low temperature, the battery has electricity,\n"
"                       # but the battery voltage is too low.\n"
"uint8 veryLowVoltageAlarm\n"
"uint8 LowVoltageAlarm\n"
"uint8 seriousLowCapacityAlarm\n"
"uint8 LowCapacityAlarm\n"
;
  }

  static const char* value(const ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remainFlyTime);
      stream.next(m.goHomeNeedTime);
      stream.next(m.landNeedTime);
      stream.next(m.goHomeNeedCapacity);
      stream.next(m.landNeedCapacity);
      stream.next(m.safeFlyRadius);
      stream.next(m.capacityConsumeSpeed);
      stream.next(m.batteryState);
      stream.next(m.goHomeCountDownState);
      stream.next(m.gohomeCountDownvalue);
      stream.next(m.voltage);
      stream.next(m.batteryCapacityPercentage);
      stream.next(m.lowBatteryAlarmThreshold);
      stream.next(m.lowBatteryAlarmEnable);
      stream.next(m.seriousLowBatteryAlarmThreshold);
      stream.next(m.seriousLowBatteryAlarmEnable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryWholeInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::BatteryWholeInfo_<ContainerAllocator>& v)
  {
    s << indent << "remainFlyTime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.remainFlyTime);
    s << indent << "goHomeNeedTime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.goHomeNeedTime);
    s << indent << "landNeedTime: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.landNeedTime);
    s << indent << "goHomeNeedCapacity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.goHomeNeedCapacity);
    s << indent << "landNeedCapacity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.landNeedCapacity);
    s << indent << "safeFlyRadius: ";
    Printer<float>::stream(s, indent + "  ", v.safeFlyRadius);
    s << indent << "capacityConsumeSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.capacityConsumeSpeed);
    s << indent << "batteryState: ";
    s << std::endl;
    Printer< ::dji_osdk_ros::BatteryState_<ContainerAllocator> >::stream(s, indent + "  ", v.batteryState);
    s << indent << "goHomeCountDownState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goHomeCountDownState);
    s << indent << "gohomeCountDownvalue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gohomeCountDownvalue);
    s << indent << "voltage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "batteryCapacityPercentage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.batteryCapacityPercentage);
    s << indent << "lowBatteryAlarmThreshold: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lowBatteryAlarmThreshold);
    s << indent << "lowBatteryAlarmEnable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lowBatteryAlarmEnable);
    s << indent << "seriousLowBatteryAlarmThreshold: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seriousLowBatteryAlarmThreshold);
    s << indent << "seriousLowBatteryAlarmEnable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seriousLowBatteryAlarmEnable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_BATTERYWHOLEINFO_H
