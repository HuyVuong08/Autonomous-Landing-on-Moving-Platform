// Generated by gencpp from file neato/BumperEvent.msg
// DO NOT EDIT!


#ifndef NEATO_MESSAGE_BUMPEREVENT_H
#define NEATO_MESSAGE_BUMPEREVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neato
{
template <class ContainerAllocator>
struct BumperEvent_
{
  typedef BumperEvent_<ContainerAllocator> Type;

  BumperEvent_()
    : bumper(0)
    , engaged(false)  {
    }
  BumperEvent_(const ContainerAllocator& _alloc)
    : bumper(0)
    , engaged(false)  {
  (void)_alloc;
    }



   typedef int8_t _bumper_type;
  _bumper_type bumper;

   typedef uint8_t _engaged_type;
  _engaged_type engaged;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LEFT_SIDE)
  #undef LEFT_SIDE
#endif
#if defined(_WIN32) && defined(LEFT_FRONT)
  #undef LEFT_FRONT
#endif
#if defined(_WIN32) && defined(RIGHT_FRONT)
  #undef RIGHT_FRONT
#endif
#if defined(_WIN32) && defined(RIGHT_SIDE)
  #undef RIGHT_SIDE
#endif

  enum {
    LEFT_SIDE = 0,
    LEFT_FRONT = 1,
    RIGHT_FRONT = 2,
    RIGHT_SIDE = 3,
  };


  typedef boost::shared_ptr< ::neato::BumperEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neato::BumperEvent_<ContainerAllocator> const> ConstPtr;

}; // struct BumperEvent_

typedef ::neato::BumperEvent_<std::allocator<void> > BumperEvent;

typedef boost::shared_ptr< ::neato::BumperEvent > BumperEventPtr;
typedef boost::shared_ptr< ::neato::BumperEvent const> BumperEventConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neato::BumperEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neato::BumperEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::neato::BumperEvent_<ContainerAllocator1> & lhs, const ::neato::BumperEvent_<ContainerAllocator2> & rhs)
{
  return lhs.bumper == rhs.bumper &&
    lhs.engaged == rhs.engaged;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::neato::BumperEvent_<ContainerAllocator1> & lhs, const ::neato::BumperEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace neato

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::neato::BumperEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neato::BumperEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neato::BumperEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neato::BumperEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neato::BumperEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neato::BumperEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neato::BumperEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ebd9e65af101af002d83ad099e3c4da";
  }

  static const char* value(const ::neato::BumperEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ebd9e65af101af0ULL;
  static const uint64_t static_value2 = 0x02d83ad099e3c4daULL;
};

template<class ContainerAllocator>
struct DataType< ::neato::BumperEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neato/BumperEvent";
  }

  static const char* value(const ::neato::BumperEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neato::BumperEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Bumper Values \n"
"int8 LEFT_SIDE = 0          # Left front side bumper switch\n"
"int8 LEFT_FRONT = 1         # Left front bumper switch\n"
"int8 RIGHT_FRONT = 2        # Right front bumper switch\n"
"int8 RIGHT_SIDE = 3         # Right front side bumper switch\n"
"\n"
"int8    bumper              # values defined above\n"
"bool    engaged             # whether or not the bumper is engaged (detecting something) or not\n"
;
  }

  static const char* value(const ::neato::BumperEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neato::BumperEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bumper);
      stream.next(m.engaged);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BumperEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neato::BumperEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neato::BumperEvent_<ContainerAllocator>& v)
  {
    s << indent << "bumper: ";
    Printer<int8_t>::stream(s, indent + "  ", v.bumper);
    s << indent << "engaged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engaged);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEATO_MESSAGE_BUMPEREVENT_H
