// Generated by gencpp from file neato/ButtonEvent.msg
// DO NOT EDIT!


#ifndef NEATO_MESSAGE_BUTTONEVENT_H
#define NEATO_MESSAGE_BUTTONEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neato
{
template <class ContainerAllocator>
struct ButtonEvent_
{
  typedef ButtonEvent_<ContainerAllocator> Type;

  ButtonEvent_()
    : button(0)
    , engaged(false)  {
    }
  ButtonEvent_(const ContainerAllocator& _alloc)
    : button(0)
    , engaged(false)  {
  (void)_alloc;
    }



   typedef int8_t _button_type;
  _button_type button;

   typedef uint8_t _engaged_type;
  _engaged_type engaged;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START_BUTTON)
  #undef START_BUTTON
#endif
#if defined(_WIN32) && defined(SOFT_BUTTON)
  #undef SOFT_BUTTON
#endif
#if defined(_WIN32) && defined(BACK_BUTTON)
  #undef BACK_BUTTON
#endif
#if defined(_WIN32) && defined(DOWN_BUTTON)
  #undef DOWN_BUTTON
#endif
#if defined(_WIN32) && defined(UP_BUTTON)
  #undef UP_BUTTON
#endif

  enum {
    START_BUTTON = 0,
    SOFT_BUTTON = 1,
    BACK_BUTTON = 2,
    DOWN_BUTTON = 3,
    UP_BUTTON = 4,
  };


  typedef boost::shared_ptr< ::neato::ButtonEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neato::ButtonEvent_<ContainerAllocator> const> ConstPtr;

}; // struct ButtonEvent_

typedef ::neato::ButtonEvent_<std::allocator<void> > ButtonEvent;

typedef boost::shared_ptr< ::neato::ButtonEvent > ButtonEventPtr;
typedef boost::shared_ptr< ::neato::ButtonEvent const> ButtonEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neato::ButtonEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neato::ButtonEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::neato::ButtonEvent_<ContainerAllocator1> & lhs, const ::neato::ButtonEvent_<ContainerAllocator2> & rhs)
{
  return lhs.button == rhs.button &&
    lhs.engaged == rhs.engaged;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::neato::ButtonEvent_<ContainerAllocator1> & lhs, const ::neato::ButtonEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace neato

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::neato::ButtonEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neato::ButtonEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neato::ButtonEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neato::ButtonEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neato::ButtonEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neato::ButtonEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neato::ButtonEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c591d569eb4b1b2f2f2100469f94eec5";
  }

  static const char* value(const ::neato::ButtonEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc591d569eb4b1b2fULL;
  static const uint64_t static_value2 = 0x2f2100469f94eec5ULL;
};

template<class ContainerAllocator>
struct DataType< ::neato::ButtonEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neato/ButtonEvent";
  }

  static const char* value(const ::neato::ButtonEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neato::ButtonEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Button Values\n"
"int8 START_BUTTON = 0   # Start button\n"
"int8 SOFT_BUTTON = 1    # Soft button\n"
"int8 BACK_BUTTON = 2    # Back button\n"
"int8 DOWN_BUTTON = 3    # Down button\n"
"int8 UP_BUTTON = 4      # Up button\n"
"\n"
"int8    button          # expected values above\n"
"bool    engaged         # whether or not the button is down\n"
;
  }

  static const char* value(const ::neato::ButtonEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neato::ButtonEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.button);
      stream.next(m.engaged);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ButtonEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neato::ButtonEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neato::ButtonEvent_<ContainerAllocator>& v)
  {
    s << indent << "button: ";
    Printer<int8_t>::stream(s, indent + "  ", v.button);
    s << indent << "engaged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engaged);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEATO_MESSAGE_BUTTONEVENT_H
