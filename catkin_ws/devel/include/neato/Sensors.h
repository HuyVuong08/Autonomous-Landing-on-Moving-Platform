// Generated by gencpp from file neato/Sensors.msg
// DO NOT EDIT!


#ifndef NEATO_MESSAGE_SENSORS_H
#define NEATO_MESSAGE_SENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neato
{
template <class ContainerAllocator>
struct Sensors_
{
  typedef Sensors_<ContainerAllocator> Type;

  Sensors_()
    : WallSensorInMM(0)
    , BatteryVoltageInmV(0)
    , LeftDropInMM(0)
    , RightDropInMM(0)
    , LeftMagSensor(0)
    , RightMagSensor(0)
    , UIButtonInmV(0)
    , VacuumCurrentInmA(0)
    , ChargeVoltInmV(0)
    , BatteryTemp0InC(0)
    , BatteryTemp1InC(0)
    , CurrentInmA(0)
    , SideBrushCurrentInmA(0)
    , VoltageReferenceInmV(0)
    , AccelXInmG(0)
    , AccelYInmG(0)
    , AccelZInmG(0)
    , SNSR_DC_JACK_CONNECT(false)
    , SNSR_DUSTBIN_IS_IN(false)
    , SNSR_LEFT_WHEEL_EXTENDED(false)
    , SNSR_RIGHT_WHEEL_EXTENDED(false)
    , LSIDEBIT(false)
    , LFRONTBIT(false)
    , RSIDEBIT(false)
    , RFRONTBIT(false)  {
    }
  Sensors_(const ContainerAllocator& _alloc)
    : WallSensorInMM(0)
    , BatteryVoltageInmV(0)
    , LeftDropInMM(0)
    , RightDropInMM(0)
    , LeftMagSensor(0)
    , RightMagSensor(0)
    , UIButtonInmV(0)
    , VacuumCurrentInmA(0)
    , ChargeVoltInmV(0)
    , BatteryTemp0InC(0)
    , BatteryTemp1InC(0)
    , CurrentInmA(0)
    , SideBrushCurrentInmA(0)
    , VoltageReferenceInmV(0)
    , AccelXInmG(0)
    , AccelYInmG(0)
    , AccelZInmG(0)
    , SNSR_DC_JACK_CONNECT(false)
    , SNSR_DUSTBIN_IS_IN(false)
    , SNSR_LEFT_WHEEL_EXTENDED(false)
    , SNSR_RIGHT_WHEEL_EXTENDED(false)
    , LSIDEBIT(false)
    , LFRONTBIT(false)
    , RSIDEBIT(false)
    , RFRONTBIT(false)  {
  (void)_alloc;
    }



   typedef uint16_t _WallSensorInMM_type;
  _WallSensorInMM_type WallSensorInMM;

   typedef uint16_t _BatteryVoltageInmV_type;
  _BatteryVoltageInmV_type BatteryVoltageInmV;

   typedef uint16_t _LeftDropInMM_type;
  _LeftDropInMM_type LeftDropInMM;

   typedef uint16_t _RightDropInMM_type;
  _RightDropInMM_type RightDropInMM;

   typedef int16_t _LeftMagSensor_type;
  _LeftMagSensor_type LeftMagSensor;

   typedef int16_t _RightMagSensor_type;
  _RightMagSensor_type RightMagSensor;

   typedef int16_t _UIButtonInmV_type;
  _UIButtonInmV_type UIButtonInmV;

   typedef int16_t _VacuumCurrentInmA_type;
  _VacuumCurrentInmA_type VacuumCurrentInmA;

   typedef uint16_t _ChargeVoltInmV_type;
  _ChargeVoltInmV_type ChargeVoltInmV;

   typedef int8_t _BatteryTemp0InC_type;
  _BatteryTemp0InC_type BatteryTemp0InC;

   typedef int8_t _BatteryTemp1InC_type;
  _BatteryTemp1InC_type BatteryTemp1InC;

   typedef int16_t _CurrentInmA_type;
  _CurrentInmA_type CurrentInmA;

   typedef int16_t _SideBrushCurrentInmA_type;
  _SideBrushCurrentInmA_type SideBrushCurrentInmA;

   typedef int16_t _VoltageReferenceInmV_type;
  _VoltageReferenceInmV_type VoltageReferenceInmV;

   typedef int16_t _AccelXInmG_type;
  _AccelXInmG_type AccelXInmG;

   typedef int16_t _AccelYInmG_type;
  _AccelYInmG_type AccelYInmG;

   typedef int16_t _AccelZInmG_type;
  _AccelZInmG_type AccelZInmG;

   typedef uint8_t _SNSR_DC_JACK_CONNECT_type;
  _SNSR_DC_JACK_CONNECT_type SNSR_DC_JACK_CONNECT;

   typedef uint8_t _SNSR_DUSTBIN_IS_IN_type;
  _SNSR_DUSTBIN_IS_IN_type SNSR_DUSTBIN_IS_IN;

   typedef uint8_t _SNSR_LEFT_WHEEL_EXTENDED_type;
  _SNSR_LEFT_WHEEL_EXTENDED_type SNSR_LEFT_WHEEL_EXTENDED;

   typedef uint8_t _SNSR_RIGHT_WHEEL_EXTENDED_type;
  _SNSR_RIGHT_WHEEL_EXTENDED_type SNSR_RIGHT_WHEEL_EXTENDED;

   typedef uint8_t _LSIDEBIT_type;
  _LSIDEBIT_type LSIDEBIT;

   typedef uint8_t _LFRONTBIT_type;
  _LFRONTBIT_type LFRONTBIT;

   typedef uint8_t _RSIDEBIT_type;
  _RSIDEBIT_type RSIDEBIT;

   typedef uint8_t _RFRONTBIT_type;
  _RFRONTBIT_type RFRONTBIT;





  typedef boost::shared_ptr< ::neato::Sensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neato::Sensors_<ContainerAllocator> const> ConstPtr;

}; // struct Sensors_

typedef ::neato::Sensors_<std::allocator<void> > Sensors;

typedef boost::shared_ptr< ::neato::Sensors > SensorsPtr;
typedef boost::shared_ptr< ::neato::Sensors const> SensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neato::Sensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neato::Sensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::neato::Sensors_<ContainerAllocator1> & lhs, const ::neato::Sensors_<ContainerAllocator2> & rhs)
{
  return lhs.WallSensorInMM == rhs.WallSensorInMM &&
    lhs.BatteryVoltageInmV == rhs.BatteryVoltageInmV &&
    lhs.LeftDropInMM == rhs.LeftDropInMM &&
    lhs.RightDropInMM == rhs.RightDropInMM &&
    lhs.LeftMagSensor == rhs.LeftMagSensor &&
    lhs.RightMagSensor == rhs.RightMagSensor &&
    lhs.UIButtonInmV == rhs.UIButtonInmV &&
    lhs.VacuumCurrentInmA == rhs.VacuumCurrentInmA &&
    lhs.ChargeVoltInmV == rhs.ChargeVoltInmV &&
    lhs.BatteryTemp0InC == rhs.BatteryTemp0InC &&
    lhs.BatteryTemp1InC == rhs.BatteryTemp1InC &&
    lhs.CurrentInmA == rhs.CurrentInmA &&
    lhs.SideBrushCurrentInmA == rhs.SideBrushCurrentInmA &&
    lhs.VoltageReferenceInmV == rhs.VoltageReferenceInmV &&
    lhs.AccelXInmG == rhs.AccelXInmG &&
    lhs.AccelYInmG == rhs.AccelYInmG &&
    lhs.AccelZInmG == rhs.AccelZInmG &&
    lhs.SNSR_DC_JACK_CONNECT == rhs.SNSR_DC_JACK_CONNECT &&
    lhs.SNSR_DUSTBIN_IS_IN == rhs.SNSR_DUSTBIN_IS_IN &&
    lhs.SNSR_LEFT_WHEEL_EXTENDED == rhs.SNSR_LEFT_WHEEL_EXTENDED &&
    lhs.SNSR_RIGHT_WHEEL_EXTENDED == rhs.SNSR_RIGHT_WHEEL_EXTENDED &&
    lhs.LSIDEBIT == rhs.LSIDEBIT &&
    lhs.LFRONTBIT == rhs.LFRONTBIT &&
    lhs.RSIDEBIT == rhs.RSIDEBIT &&
    lhs.RFRONTBIT == rhs.RFRONTBIT;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::neato::Sensors_<ContainerAllocator1> & lhs, const ::neato::Sensors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace neato

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::neato::Sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neato::Sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neato::Sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neato::Sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neato::Sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neato::Sensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neato::Sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1c7bd2ddcb3d5f803e6c67b3919c35f";
  }

  static const char* value(const ::neato::Sensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1c7bd2ddcb3d5f8ULL;
  static const uint64_t static_value2 = 0x03e6c67b3919c35fULL;
};

template<class ContainerAllocator>
struct DataType< ::neato::Sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neato/Sensors";
  }

  static const char* value(const ::neato::Sensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neato::Sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#Analog Sensors\n"
"uint16  WallSensorInMM              #Example: 34585\n"
"uint16  BatteryVoltageInmV          #Example: 16348\n"
"uint16  LeftDropInMM                #Example: 0\n"
"uint16  RightDropInMM               #Example: 0\n"
"int16   LeftMagSensor               #Example: 32768\n"
"int16   RightMagSensor              #Example: 32768\n"
"int16   UIButtonInmV                #Example: 3330\n"
"int16   VacuumCurrentInmA           #Example: 0\n"
"uint16  ChargeVoltInmV              #Example: 24024\n"
"int8    BatteryTemp0InC             #Example: 30\n"
"int8    BatteryTemp1InC             #Example: 28\n"
"int16   CurrentInmA                 #Example: 40\n"
"int16   SideBrushCurrentInmA        #Example: 0\n"
"int16   VoltageReferenceInmV        #Example: 1225\n"
"int16   AccelXInmG                  #Example: 36\n"
"int16   AccelYInmG                  #Example: 16\n"
"int16   AccelZInmG                  #Example: 1008\n"
"# the ones below are not supported due to lack of compatibility\n"
"# int8    XTemp0InC                   #Example: 28\n"
"# int8    XTemp1InC                   #Example: 28\n"
"# int8    NotConnected1               #Example: 0 - unknown\n"
"# int8    NotConnected2               #Example: 0 - unknown\n"
"# int8    NotConnected3               #Example: 0 - unknown\n"
"\n"
"#Digital sensors\n"
"bool    SNSR_DC_JACK_CONNECT        #Example: 0 \n"
"bool    SNSR_DUSTBIN_IS_IN          #Example: 1\n"
"bool    SNSR_LEFT_WHEEL_EXTENDED    #Example: 0\n"
"bool    SNSR_RIGHT_WHEEL_EXTENDED   #Example: 0\n"
"bool    LSIDEBIT                    #Example: 0 \n"
"bool    LFRONTBIT                   #Example: 0\n"
"bool    RSIDEBIT                    #Example: 0 \n"
"bool    RFRONTBIT                   #Example: 0 \n"
"\n"
;
  }

  static const char* value(const ::neato::Sensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neato::Sensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.WallSensorInMM);
      stream.next(m.BatteryVoltageInmV);
      stream.next(m.LeftDropInMM);
      stream.next(m.RightDropInMM);
      stream.next(m.LeftMagSensor);
      stream.next(m.RightMagSensor);
      stream.next(m.UIButtonInmV);
      stream.next(m.VacuumCurrentInmA);
      stream.next(m.ChargeVoltInmV);
      stream.next(m.BatteryTemp0InC);
      stream.next(m.BatteryTemp1InC);
      stream.next(m.CurrentInmA);
      stream.next(m.SideBrushCurrentInmA);
      stream.next(m.VoltageReferenceInmV);
      stream.next(m.AccelXInmG);
      stream.next(m.AccelYInmG);
      stream.next(m.AccelZInmG);
      stream.next(m.SNSR_DC_JACK_CONNECT);
      stream.next(m.SNSR_DUSTBIN_IS_IN);
      stream.next(m.SNSR_LEFT_WHEEL_EXTENDED);
      stream.next(m.SNSR_RIGHT_WHEEL_EXTENDED);
      stream.next(m.LSIDEBIT);
      stream.next(m.LFRONTBIT);
      stream.next(m.RSIDEBIT);
      stream.next(m.RFRONTBIT);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neato::Sensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neato::Sensors_<ContainerAllocator>& v)
  {
    s << indent << "WallSensorInMM: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.WallSensorInMM);
    s << indent << "BatteryVoltageInmV: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.BatteryVoltageInmV);
    s << indent << "LeftDropInMM: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.LeftDropInMM);
    s << indent << "RightDropInMM: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.RightDropInMM);
    s << indent << "LeftMagSensor: ";
    Printer<int16_t>::stream(s, indent + "  ", v.LeftMagSensor);
    s << indent << "RightMagSensor: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RightMagSensor);
    s << indent << "UIButtonInmV: ";
    Printer<int16_t>::stream(s, indent + "  ", v.UIButtonInmV);
    s << indent << "VacuumCurrentInmA: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VacuumCurrentInmA);
    s << indent << "ChargeVoltInmV: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ChargeVoltInmV);
    s << indent << "BatteryTemp0InC: ";
    Printer<int8_t>::stream(s, indent + "  ", v.BatteryTemp0InC);
    s << indent << "BatteryTemp1InC: ";
    Printer<int8_t>::stream(s, indent + "  ", v.BatteryTemp1InC);
    s << indent << "CurrentInmA: ";
    Printer<int16_t>::stream(s, indent + "  ", v.CurrentInmA);
    s << indent << "SideBrushCurrentInmA: ";
    Printer<int16_t>::stream(s, indent + "  ", v.SideBrushCurrentInmA);
    s << indent << "VoltageReferenceInmV: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VoltageReferenceInmV);
    s << indent << "AccelXInmG: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AccelXInmG);
    s << indent << "AccelYInmG: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AccelYInmG);
    s << indent << "AccelZInmG: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AccelZInmG);
    s << indent << "SNSR_DC_JACK_CONNECT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SNSR_DC_JACK_CONNECT);
    s << indent << "SNSR_DUSTBIN_IS_IN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SNSR_DUSTBIN_IS_IN);
    s << indent << "SNSR_LEFT_WHEEL_EXTENDED: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SNSR_LEFT_WHEEL_EXTENDED);
    s << indent << "SNSR_RIGHT_WHEEL_EXTENDED: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SNSR_RIGHT_WHEEL_EXTENDED);
    s << indent << "LSIDEBIT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LSIDEBIT);
    s << indent << "LFRONTBIT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LFRONTBIT);
    s << indent << "RSIDEBIT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RSIDEBIT);
    s << indent << "RFRONTBIT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RFRONTBIT);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEATO_MESSAGE_SENSORS_H
