# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from neato/ButtonEvent.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ButtonEvent(genpy.Message):
  _md5sum = "c591d569eb4b1b2f2f2100469f94eec5"
  _type = "neato/ButtonEvent"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Button Values
int8 START_BUTTON = 0   # Start button
int8 SOFT_BUTTON = 1    # Soft button
int8 BACK_BUTTON = 2    # Back button
int8 DOWN_BUTTON = 3    # Down button
int8 UP_BUTTON = 4      # Up button

int8    button          # expected values above
bool    engaged         # whether or not the button is down
"""
  # Pseudo-constants
  START_BUTTON = 0
  SOFT_BUTTON = 1
  BACK_BUTTON = 2
  DOWN_BUTTON = 3
  UP_BUTTON = 4

  __slots__ = ['button','engaged']
  _slot_types = ['int8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       button,engaged

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ButtonEvent, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.button is None:
        self.button = 0
      if self.engaged is None:
        self.engaged = False
    else:
      self.button = 0
      self.engaged = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_bB().pack(_x.button, _x.engaged))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.button, _x.engaged,) = _get_struct_bB().unpack(str[start:end])
      self.engaged = bool(self.engaged)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_bB().pack(_x.button, _x.engaged))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.button, _x.engaged,) = _get_struct_bB().unpack(str[start:end])
      self.engaged = bool(self.engaged)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_bB = None
def _get_struct_bB():
    global _struct_bB
    if _struct_bB is None:
        _struct_bB = struct.Struct("<bB")
    return _struct_bB
