# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from neato/Sensors.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Sensors(genpy.Message):
  _md5sum = "e1c7bd2ddcb3d5f803e6c67b3919c35f"
  _type = "neato/Sensors"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
#Analog Sensors
uint16  WallSensorInMM              #Example: 34585
uint16  BatteryVoltageInmV          #Example: 16348
uint16  LeftDropInMM                #Example: 0
uint16  RightDropInMM               #Example: 0
int16   LeftMagSensor               #Example: 32768
int16   RightMagSensor              #Example: 32768
int16   UIButtonInmV                #Example: 3330
int16   VacuumCurrentInmA           #Example: 0
uint16  ChargeVoltInmV              #Example: 24024
int8    BatteryTemp0InC             #Example: 30
int8    BatteryTemp1InC             #Example: 28
int16   CurrentInmA                 #Example: 40
int16   SideBrushCurrentInmA        #Example: 0
int16   VoltageReferenceInmV        #Example: 1225
int16   AccelXInmG                  #Example: 36
int16   AccelYInmG                  #Example: 16
int16   AccelZInmG                  #Example: 1008
# the ones below are not supported due to lack of compatibility
# int8    XTemp0InC                   #Example: 28
# int8    XTemp1InC                   #Example: 28
# int8    NotConnected1               #Example: 0 - unknown
# int8    NotConnected2               #Example: 0 - unknown
# int8    NotConnected3               #Example: 0 - unknown

#Digital sensors
bool    SNSR_DC_JACK_CONNECT        #Example: 0 
bool    SNSR_DUSTBIN_IS_IN          #Example: 1
bool    SNSR_LEFT_WHEEL_EXTENDED    #Example: 0
bool    SNSR_RIGHT_WHEEL_EXTENDED   #Example: 0
bool    LSIDEBIT                    #Example: 0 
bool    LFRONTBIT                   #Example: 0
bool    RSIDEBIT                    #Example: 0 
bool    RFRONTBIT                   #Example: 0 

"""
  __slots__ = ['WallSensorInMM','BatteryVoltageInmV','LeftDropInMM','RightDropInMM','LeftMagSensor','RightMagSensor','UIButtonInmV','VacuumCurrentInmA','ChargeVoltInmV','BatteryTemp0InC','BatteryTemp1InC','CurrentInmA','SideBrushCurrentInmA','VoltageReferenceInmV','AccelXInmG','AccelYInmG','AccelZInmG','SNSR_DC_JACK_CONNECT','SNSR_DUSTBIN_IS_IN','SNSR_LEFT_WHEEL_EXTENDED','SNSR_RIGHT_WHEEL_EXTENDED','LSIDEBIT','LFRONTBIT','RSIDEBIT','RFRONTBIT']
  _slot_types = ['uint16','uint16','uint16','uint16','int16','int16','int16','int16','uint16','int8','int8','int16','int16','int16','int16','int16','int16','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       WallSensorInMM,BatteryVoltageInmV,LeftDropInMM,RightDropInMM,LeftMagSensor,RightMagSensor,UIButtonInmV,VacuumCurrentInmA,ChargeVoltInmV,BatteryTemp0InC,BatteryTemp1InC,CurrentInmA,SideBrushCurrentInmA,VoltageReferenceInmV,AccelXInmG,AccelYInmG,AccelZInmG,SNSR_DC_JACK_CONNECT,SNSR_DUSTBIN_IS_IN,SNSR_LEFT_WHEEL_EXTENDED,SNSR_RIGHT_WHEEL_EXTENDED,LSIDEBIT,LFRONTBIT,RSIDEBIT,RFRONTBIT

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Sensors, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.WallSensorInMM is None:
        self.WallSensorInMM = 0
      if self.BatteryVoltageInmV is None:
        self.BatteryVoltageInmV = 0
      if self.LeftDropInMM is None:
        self.LeftDropInMM = 0
      if self.RightDropInMM is None:
        self.RightDropInMM = 0
      if self.LeftMagSensor is None:
        self.LeftMagSensor = 0
      if self.RightMagSensor is None:
        self.RightMagSensor = 0
      if self.UIButtonInmV is None:
        self.UIButtonInmV = 0
      if self.VacuumCurrentInmA is None:
        self.VacuumCurrentInmA = 0
      if self.ChargeVoltInmV is None:
        self.ChargeVoltInmV = 0
      if self.BatteryTemp0InC is None:
        self.BatteryTemp0InC = 0
      if self.BatteryTemp1InC is None:
        self.BatteryTemp1InC = 0
      if self.CurrentInmA is None:
        self.CurrentInmA = 0
      if self.SideBrushCurrentInmA is None:
        self.SideBrushCurrentInmA = 0
      if self.VoltageReferenceInmV is None:
        self.VoltageReferenceInmV = 0
      if self.AccelXInmG is None:
        self.AccelXInmG = 0
      if self.AccelYInmG is None:
        self.AccelYInmG = 0
      if self.AccelZInmG is None:
        self.AccelZInmG = 0
      if self.SNSR_DC_JACK_CONNECT is None:
        self.SNSR_DC_JACK_CONNECT = False
      if self.SNSR_DUSTBIN_IS_IN is None:
        self.SNSR_DUSTBIN_IS_IN = False
      if self.SNSR_LEFT_WHEEL_EXTENDED is None:
        self.SNSR_LEFT_WHEEL_EXTENDED = False
      if self.SNSR_RIGHT_WHEEL_EXTENDED is None:
        self.SNSR_RIGHT_WHEEL_EXTENDED = False
      if self.LSIDEBIT is None:
        self.LSIDEBIT = False
      if self.LFRONTBIT is None:
        self.LFRONTBIT = False
      if self.RSIDEBIT is None:
        self.RSIDEBIT = False
      if self.RFRONTBIT is None:
        self.RFRONTBIT = False
    else:
      self.WallSensorInMM = 0
      self.BatteryVoltageInmV = 0
      self.LeftDropInMM = 0
      self.RightDropInMM = 0
      self.LeftMagSensor = 0
      self.RightMagSensor = 0
      self.UIButtonInmV = 0
      self.VacuumCurrentInmA = 0
      self.ChargeVoltInmV = 0
      self.BatteryTemp0InC = 0
      self.BatteryTemp1InC = 0
      self.CurrentInmA = 0
      self.SideBrushCurrentInmA = 0
      self.VoltageReferenceInmV = 0
      self.AccelXInmG = 0
      self.AccelYInmG = 0
      self.AccelZInmG = 0
      self.SNSR_DC_JACK_CONNECT = False
      self.SNSR_DUSTBIN_IS_IN = False
      self.SNSR_LEFT_WHEEL_EXTENDED = False
      self.SNSR_RIGHT_WHEEL_EXTENDED = False
      self.LSIDEBIT = False
      self.LFRONTBIT = False
      self.RSIDEBIT = False
      self.RFRONTBIT = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4H4hH2b6h8B().pack(_x.WallSensorInMM, _x.BatteryVoltageInmV, _x.LeftDropInMM, _x.RightDropInMM, _x.LeftMagSensor, _x.RightMagSensor, _x.UIButtonInmV, _x.VacuumCurrentInmA, _x.ChargeVoltInmV, _x.BatteryTemp0InC, _x.BatteryTemp1InC, _x.CurrentInmA, _x.SideBrushCurrentInmA, _x.VoltageReferenceInmV, _x.AccelXInmG, _x.AccelYInmG, _x.AccelZInmG, _x.SNSR_DC_JACK_CONNECT, _x.SNSR_DUSTBIN_IS_IN, _x.SNSR_LEFT_WHEEL_EXTENDED, _x.SNSR_RIGHT_WHEEL_EXTENDED, _x.LSIDEBIT, _x.LFRONTBIT, _x.RSIDEBIT, _x.RFRONTBIT))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.WallSensorInMM, _x.BatteryVoltageInmV, _x.LeftDropInMM, _x.RightDropInMM, _x.LeftMagSensor, _x.RightMagSensor, _x.UIButtonInmV, _x.VacuumCurrentInmA, _x.ChargeVoltInmV, _x.BatteryTemp0InC, _x.BatteryTemp1InC, _x.CurrentInmA, _x.SideBrushCurrentInmA, _x.VoltageReferenceInmV, _x.AccelXInmG, _x.AccelYInmG, _x.AccelZInmG, _x.SNSR_DC_JACK_CONNECT, _x.SNSR_DUSTBIN_IS_IN, _x.SNSR_LEFT_WHEEL_EXTENDED, _x.SNSR_RIGHT_WHEEL_EXTENDED, _x.LSIDEBIT, _x.LFRONTBIT, _x.RSIDEBIT, _x.RFRONTBIT,) = _get_struct_4H4hH2b6h8B().unpack(str[start:end])
      self.SNSR_DC_JACK_CONNECT = bool(self.SNSR_DC_JACK_CONNECT)
      self.SNSR_DUSTBIN_IS_IN = bool(self.SNSR_DUSTBIN_IS_IN)
      self.SNSR_LEFT_WHEEL_EXTENDED = bool(self.SNSR_LEFT_WHEEL_EXTENDED)
      self.SNSR_RIGHT_WHEEL_EXTENDED = bool(self.SNSR_RIGHT_WHEEL_EXTENDED)
      self.LSIDEBIT = bool(self.LSIDEBIT)
      self.LFRONTBIT = bool(self.LFRONTBIT)
      self.RSIDEBIT = bool(self.RSIDEBIT)
      self.RFRONTBIT = bool(self.RFRONTBIT)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4H4hH2b6h8B().pack(_x.WallSensorInMM, _x.BatteryVoltageInmV, _x.LeftDropInMM, _x.RightDropInMM, _x.LeftMagSensor, _x.RightMagSensor, _x.UIButtonInmV, _x.VacuumCurrentInmA, _x.ChargeVoltInmV, _x.BatteryTemp0InC, _x.BatteryTemp1InC, _x.CurrentInmA, _x.SideBrushCurrentInmA, _x.VoltageReferenceInmV, _x.AccelXInmG, _x.AccelYInmG, _x.AccelZInmG, _x.SNSR_DC_JACK_CONNECT, _x.SNSR_DUSTBIN_IS_IN, _x.SNSR_LEFT_WHEEL_EXTENDED, _x.SNSR_RIGHT_WHEEL_EXTENDED, _x.LSIDEBIT, _x.LFRONTBIT, _x.RSIDEBIT, _x.RFRONTBIT))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.WallSensorInMM, _x.BatteryVoltageInmV, _x.LeftDropInMM, _x.RightDropInMM, _x.LeftMagSensor, _x.RightMagSensor, _x.UIButtonInmV, _x.VacuumCurrentInmA, _x.ChargeVoltInmV, _x.BatteryTemp0InC, _x.BatteryTemp1InC, _x.CurrentInmA, _x.SideBrushCurrentInmA, _x.VoltageReferenceInmV, _x.AccelXInmG, _x.AccelYInmG, _x.AccelZInmG, _x.SNSR_DC_JACK_CONNECT, _x.SNSR_DUSTBIN_IS_IN, _x.SNSR_LEFT_WHEEL_EXTENDED, _x.SNSR_RIGHT_WHEEL_EXTENDED, _x.LSIDEBIT, _x.LFRONTBIT, _x.RSIDEBIT, _x.RFRONTBIT,) = _get_struct_4H4hH2b6h8B().unpack(str[start:end])
      self.SNSR_DC_JACK_CONNECT = bool(self.SNSR_DC_JACK_CONNECT)
      self.SNSR_DUSTBIN_IS_IN = bool(self.SNSR_DUSTBIN_IS_IN)
      self.SNSR_LEFT_WHEEL_EXTENDED = bool(self.SNSR_LEFT_WHEEL_EXTENDED)
      self.SNSR_RIGHT_WHEEL_EXTENDED = bool(self.SNSR_RIGHT_WHEEL_EXTENDED)
      self.LSIDEBIT = bool(self.LSIDEBIT)
      self.LFRONTBIT = bool(self.LFRONTBIT)
      self.RSIDEBIT = bool(self.RSIDEBIT)
      self.RFRONTBIT = bool(self.RFRONTBIT)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4H4hH2b6h8B = None
def _get_struct_4H4hH2b6h8B():
    global _struct_4H4hH2b6h8B
    if _struct_4H4hH2b6h8B is None:
        _struct_4H4hH2b6h8B = struct.Struct("<4H4hH2b6h8B")
    return _struct_4H4hH2b6h8B
