# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/GetSingleBatteryDynamicInfoRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetSingleBatteryDynamicInfoRequest(genpy.Message):
  _md5sum = "cbc22df5041907ba93cd43bd5373dcc1"
  _type = "dji_osdk_ros/GetSingleBatteryDynamicInfoRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#request
uint8 first_smart_battery = 1
uint8 second_smart_battery = 2

uint8 batteryIndex
"""
  # Pseudo-constants
  first_smart_battery = 1
  second_smart_battery = 2

  __slots__ = ['batteryIndex']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       batteryIndex

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetSingleBatteryDynamicInfoRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.batteryIndex is None:
        self.batteryIndex = 0
    else:
      self.batteryIndex = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.batteryIndex
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.batteryIndex,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.batteryIndex
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.batteryIndex,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/GetSingleBatteryDynamicInfoResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_osdk_ros.msg

class GetSingleBatteryDynamicInfoResponse(genpy.Message):
  _md5sum = "a9853b8ae869150ea1bdf509de0b60da"
  _type = "dji_osdk_ros/GetSingleBatteryDynamicInfoResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#response
SmartBatteryDynamicInfo smartBatteryDynamicInfo

================================================================================
MSG: dji_osdk_ros/SmartBatteryDynamicInfo
uint8  batteryIndex
int32  currentVoltage          # uint:mV
int32  currentElectric         # uint:mA
uint32 fullCapacity            # uint:mAh
uint32 remainedCapacity        # uint:mAh
int16  batteryTemperature      # uint:0.1â„ƒ
uint8  cellCount
uint8  batteryCapacityPercent  # uint:%
SmartBatteryState batteryState
uint8  SOP                     # Relative power percentage
================================================================================
MSG: dji_osdk_ros/SmartBatteryState
uint8 cellBreak                  # 0:normal;other:Undervoltage core index(0x01-0x1F)
uint8 selfCheckError             # enum-type: DJISmartBatterySelfCheck
uint8 batteryClosedReason        # enum-type: DJI_BETTERY_CLOSED_REASON
uint8 batSOHState                # enum-type: DJISmartBatterySohState*/
uint8 maxCycleLimit              # APP:cycle_limit*10*/
uint8 batteryCommunicationAbnormal
uint8 hasCellBreak
uint8 heatState                  # enum-type: DJISmartBatteryHeatState"""
  __slots__ = ['smartBatteryDynamicInfo']
  _slot_types = ['dji_osdk_ros/SmartBatteryDynamicInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       smartBatteryDynamicInfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetSingleBatteryDynamicInfoResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.smartBatteryDynamicInfo is None:
        self.smartBatteryDynamicInfo = dji_osdk_ros.msg.SmartBatteryDynamicInfo()
    else:
      self.smartBatteryDynamicInfo = dji_osdk_ros.msg.SmartBatteryDynamicInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2i2Ih11B().pack(_x.smartBatteryDynamicInfo.batteryIndex, _x.smartBatteryDynamicInfo.currentVoltage, _x.smartBatteryDynamicInfo.currentElectric, _x.smartBatteryDynamicInfo.fullCapacity, _x.smartBatteryDynamicInfo.remainedCapacity, _x.smartBatteryDynamicInfo.batteryTemperature, _x.smartBatteryDynamicInfo.cellCount, _x.smartBatteryDynamicInfo.batteryCapacityPercent, _x.smartBatteryDynamicInfo.batteryState.cellBreak, _x.smartBatteryDynamicInfo.batteryState.selfCheckError, _x.smartBatteryDynamicInfo.batteryState.batteryClosedReason, _x.smartBatteryDynamicInfo.batteryState.batSOHState, _x.smartBatteryDynamicInfo.batteryState.maxCycleLimit, _x.smartBatteryDynamicInfo.batteryState.batteryCommunicationAbnormal, _x.smartBatteryDynamicInfo.batteryState.hasCellBreak, _x.smartBatteryDynamicInfo.batteryState.heatState, _x.smartBatteryDynamicInfo.SOP))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.smartBatteryDynamicInfo is None:
        self.smartBatteryDynamicInfo = dji_osdk_ros.msg.SmartBatteryDynamicInfo()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.smartBatteryDynamicInfo.batteryIndex, _x.smartBatteryDynamicInfo.currentVoltage, _x.smartBatteryDynamicInfo.currentElectric, _x.smartBatteryDynamicInfo.fullCapacity, _x.smartBatteryDynamicInfo.remainedCapacity, _x.smartBatteryDynamicInfo.batteryTemperature, _x.smartBatteryDynamicInfo.cellCount, _x.smartBatteryDynamicInfo.batteryCapacityPercent, _x.smartBatteryDynamicInfo.batteryState.cellBreak, _x.smartBatteryDynamicInfo.batteryState.selfCheckError, _x.smartBatteryDynamicInfo.batteryState.batteryClosedReason, _x.smartBatteryDynamicInfo.batteryState.batSOHState, _x.smartBatteryDynamicInfo.batteryState.maxCycleLimit, _x.smartBatteryDynamicInfo.batteryState.batteryCommunicationAbnormal, _x.smartBatteryDynamicInfo.batteryState.hasCellBreak, _x.smartBatteryDynamicInfo.batteryState.heatState, _x.smartBatteryDynamicInfo.SOP,) = _get_struct_B2i2Ih11B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2i2Ih11B().pack(_x.smartBatteryDynamicInfo.batteryIndex, _x.smartBatteryDynamicInfo.currentVoltage, _x.smartBatteryDynamicInfo.currentElectric, _x.smartBatteryDynamicInfo.fullCapacity, _x.smartBatteryDynamicInfo.remainedCapacity, _x.smartBatteryDynamicInfo.batteryTemperature, _x.smartBatteryDynamicInfo.cellCount, _x.smartBatteryDynamicInfo.batteryCapacityPercent, _x.smartBatteryDynamicInfo.batteryState.cellBreak, _x.smartBatteryDynamicInfo.batteryState.selfCheckError, _x.smartBatteryDynamicInfo.batteryState.batteryClosedReason, _x.smartBatteryDynamicInfo.batteryState.batSOHState, _x.smartBatteryDynamicInfo.batteryState.maxCycleLimit, _x.smartBatteryDynamicInfo.batteryState.batteryCommunicationAbnormal, _x.smartBatteryDynamicInfo.batteryState.hasCellBreak, _x.smartBatteryDynamicInfo.batteryState.heatState, _x.smartBatteryDynamicInfo.SOP))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.smartBatteryDynamicInfo is None:
        self.smartBatteryDynamicInfo = dji_osdk_ros.msg.SmartBatteryDynamicInfo()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.smartBatteryDynamicInfo.batteryIndex, _x.smartBatteryDynamicInfo.currentVoltage, _x.smartBatteryDynamicInfo.currentElectric, _x.smartBatteryDynamicInfo.fullCapacity, _x.smartBatteryDynamicInfo.remainedCapacity, _x.smartBatteryDynamicInfo.batteryTemperature, _x.smartBatteryDynamicInfo.cellCount, _x.smartBatteryDynamicInfo.batteryCapacityPercent, _x.smartBatteryDynamicInfo.batteryState.cellBreak, _x.smartBatteryDynamicInfo.batteryState.selfCheckError, _x.smartBatteryDynamicInfo.batteryState.batteryClosedReason, _x.smartBatteryDynamicInfo.batteryState.batSOHState, _x.smartBatteryDynamicInfo.batteryState.maxCycleLimit, _x.smartBatteryDynamicInfo.batteryState.batteryCommunicationAbnormal, _x.smartBatteryDynamicInfo.batteryState.hasCellBreak, _x.smartBatteryDynamicInfo.batteryState.heatState, _x.smartBatteryDynamicInfo.SOP,) = _get_struct_B2i2Ih11B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2i2Ih11B = None
def _get_struct_B2i2Ih11B():
    global _struct_B2i2Ih11B
    if _struct_B2i2Ih11B is None:
        _struct_B2i2Ih11B = struct.Struct("<B2i2Ih11B")
    return _struct_B2i2Ih11B
class GetSingleBatteryDynamicInfo(object):
  _type          = 'dji_osdk_ros/GetSingleBatteryDynamicInfo'
  _md5sum = 'e5d629fb1dec6d80fbc10fc0bfd54348'
  _request_class  = GetSingleBatteryDynamicInfoRequest
  _response_class = GetSingleBatteryDynamicInfoResponse
