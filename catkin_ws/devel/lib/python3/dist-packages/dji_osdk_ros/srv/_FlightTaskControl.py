# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/FlightTaskControlRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_osdk_ros.msg

class FlightTaskControlRequest(genpy.Message):
  _md5sum = "6652475a09e6d73ddea1c35a04a8b599"
  _type = "dji_osdk_ros/FlightTaskControlRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#constant for tasks
uint8 TASK_GOHOME = 1
uint8 TASK_POSITION_AND_YAW_CONTROL   = 2
uint8 TASK_GOHOME_AND_CONFIRM_LANDING = 3
uint8 TASK_TAKEOFF = 4
uint8 TASK_VELOCITY_AND_YAWRATE_CONTROL = 5
uint8 TASK_LAND          = 6
uint8 START_MOTOR        = 7
uint8 STOP_MOTOR         = 8
uint8 TASK_EXIT_GO_HOME  = 12
uint8 TASK_EXIT_LANDING  = 14
uint8 TASK_FORCE_LANDING_AVOID_GROUND = 30 #/*!< confirm landing */
uint8 TASK_FORCE_LANDING              = 31 #/*!< force landing */

#request
uint8 task    # see constants above for possible tasks
JoystickParams joystickCommand  #Provide Position and Velocity control
uint32 velocityControlTimeMs    #Velocity control time
float32 posThresholdInM  #(Meter)
float32 yawThresholdInDeg  #(Degree)

================================================================================
MSG: dji_osdk_ros/JoystickParams
float32 x   # Control with respect to the x axis of the
            # DJI::OSDK::Control::HorizontalCoordinate.
float32 y   # Control with respect to the y axis of the
            # DJI::OSDK::Control::HorizontalCoordinate.
float32 z   # Control with respect to the z axis, up is positive.
float32 yaw #Yaw position/velocity control w.r.t. the ground frame."""
  # Pseudo-constants
  TASK_GOHOME = 1
  TASK_POSITION_AND_YAW_CONTROL = 2
  TASK_GOHOME_AND_CONFIRM_LANDING = 3
  TASK_TAKEOFF = 4
  TASK_VELOCITY_AND_YAWRATE_CONTROL = 5
  TASK_LAND = 6
  START_MOTOR = 7
  STOP_MOTOR = 8
  TASK_EXIT_GO_HOME = 12
  TASK_EXIT_LANDING = 14
  TASK_FORCE_LANDING_AVOID_GROUND = 30
  TASK_FORCE_LANDING = 31

  __slots__ = ['task','joystickCommand','velocityControlTimeMs','posThresholdInM','yawThresholdInDeg']
  _slot_types = ['uint8','dji_osdk_ros/JoystickParams','uint32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task,joystickCommand,velocityControlTimeMs,posThresholdInM,yawThresholdInDeg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlightTaskControlRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task is None:
        self.task = 0
      if self.joystickCommand is None:
        self.joystickCommand = dji_osdk_ros.msg.JoystickParams()
      if self.velocityControlTimeMs is None:
        self.velocityControlTimeMs = 0
      if self.posThresholdInM is None:
        self.posThresholdInM = 0.
      if self.yawThresholdInDeg is None:
        self.yawThresholdInDeg = 0.
    else:
      self.task = 0
      self.joystickCommand = dji_osdk_ros.msg.JoystickParams()
      self.velocityControlTimeMs = 0
      self.posThresholdInM = 0.
      self.yawThresholdInDeg = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4fI2f().pack(_x.task, _x.joystickCommand.x, _x.joystickCommand.y, _x.joystickCommand.z, _x.joystickCommand.yaw, _x.velocityControlTimeMs, _x.posThresholdInM, _x.yawThresholdInDeg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joystickCommand is None:
        self.joystickCommand = dji_osdk_ros.msg.JoystickParams()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.task, _x.joystickCommand.x, _x.joystickCommand.y, _x.joystickCommand.z, _x.joystickCommand.yaw, _x.velocityControlTimeMs, _x.posThresholdInM, _x.yawThresholdInDeg,) = _get_struct_B4fI2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4fI2f().pack(_x.task, _x.joystickCommand.x, _x.joystickCommand.y, _x.joystickCommand.z, _x.joystickCommand.yaw, _x.velocityControlTimeMs, _x.posThresholdInM, _x.yawThresholdInDeg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joystickCommand is None:
        self.joystickCommand = dji_osdk_ros.msg.JoystickParams()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.task, _x.joystickCommand.x, _x.joystickCommand.y, _x.joystickCommand.z, _x.joystickCommand.yaw, _x.velocityControlTimeMs, _x.posThresholdInM, _x.yawThresholdInDeg,) = _get_struct_B4fI2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4fI2f = None
def _get_struct_B4fI2f():
    global _struct_B4fI2f
    if _struct_B4fI2f is None:
        _struct_B4fI2f = struct.Struct("<B4fI2f")
    return _struct_B4fI2f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/FlightTaskControlResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FlightTaskControlResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "dji_osdk_ros/FlightTaskControlResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#response
bool result


"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlightTaskControlResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class FlightTaskControl(object):
  _type          = 'dji_osdk_ros/FlightTaskControl'
  _md5sum = '6c2d7ee9a1feaa8383a6f0a485b64e2a'
  _request_class  = FlightTaskControlRequest
  _response_class = FlightTaskControlResponse
