# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/GetHMSDataRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetHMSDataRequest(genpy.Message):
  _md5sum = "8c1211af706069c994c06e00eb59ac9e"
  _type = "dji_osdk_ros/GetHMSDataRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#request
bool enable
"""
  __slots__ = ['enable']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetHMSDataRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enable is None:
        self.enable = False
    else:
      self.enable = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.enable
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.enable,) = _get_struct_B().unpack(str[start:end])
      self.enable = bool(self.enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.enable
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.enable,) = _get_struct_B().unpack(str[start:end])
      self.enable = bool(self.enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/GetHMSDataResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_osdk_ros.msg

class GetHMSDataResponse(genpy.Message):
  _md5sum = "7b1a3ca4f52c03bc8e0bd4ba84b0e67d"
  _type = "dji_osdk_ros/GetHMSDataResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#reponse
bool result
uint8 deviceIndex         # When the error code is related to camera or gimbal device,
                          # it will tell you which device it is.
HMSPushInfo[] errList     # error code list in each pushing
uint32 timeStamp

================================================================================
MSG: dji_osdk_ros/HMSPushInfo
uint32 alarmID     #/*! error code*/
uint8  sensorIndex #/*! fault sensor's index*/
uint8  reportLevel #/*! fault level ,0-4,0 is no error,4 is highest*/"""
  __slots__ = ['result','deviceIndex','errList','timeStamp']
  _slot_types = ['bool','uint8','dji_osdk_ros/HMSPushInfo[]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,deviceIndex,errList,timeStamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetHMSDataResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.deviceIndex is None:
        self.deviceIndex = 0
      if self.errList is None:
        self.errList = []
      if self.timeStamp is None:
        self.timeStamp = 0
    else:
      self.result = False
      self.deviceIndex = 0
      self.errList = []
      self.timeStamp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.result, _x.deviceIndex))
      length = len(self.errList)
      buff.write(_struct_I.pack(length))
      for val1 in self.errList:
        _x = val1
        buff.write(_get_struct_I2B().pack(_x.alarmID, _x.sensorIndex, _x.reportLevel))
      _x = self.timeStamp
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.errList is None:
        self.errList = None
      end = 0
      _x = self
      start = end
      end += 2
      (_x.result, _x.deviceIndex,) = _get_struct_2B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.errList = []
      for i in range(0, length):
        val1 = dji_osdk_ros.msg.HMSPushInfo()
        _x = val1
        start = end
        end += 6
        (_x.alarmID, _x.sensorIndex, _x.reportLevel,) = _get_struct_I2B().unpack(str[start:end])
        self.errList.append(val1)
      start = end
      end += 4
      (self.timeStamp,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.result, _x.deviceIndex))
      length = len(self.errList)
      buff.write(_struct_I.pack(length))
      for val1 in self.errList:
        _x = val1
        buff.write(_get_struct_I2B().pack(_x.alarmID, _x.sensorIndex, _x.reportLevel))
      _x = self.timeStamp
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.errList is None:
        self.errList = None
      end = 0
      _x = self
      start = end
      end += 2
      (_x.result, _x.deviceIndex,) = _get_struct_2B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.errList = []
      for i in range(0, length):
        val1 = dji_osdk_ros.msg.HMSPushInfo()
        _x = val1
        start = end
        end += 6
        (_x.alarmID, _x.sensorIndex, _x.reportLevel,) = _get_struct_I2B().unpack(str[start:end])
        self.errList.append(val1)
      start = end
      end += 4
      (self.timeStamp,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_I2B = None
def _get_struct_I2B():
    global _struct_I2B
    if _struct_I2B is None:
        _struct_I2B = struct.Struct("<I2B")
    return _struct_I2B
class GetHMSData(object):
  _type          = 'dji_osdk_ros/GetHMSData'
  _md5sum = '1ec4559c4a22067560534b61ee437470'
  _request_class  = GetHMSDataRequest
  _response_class = GetHMSDataResponse
