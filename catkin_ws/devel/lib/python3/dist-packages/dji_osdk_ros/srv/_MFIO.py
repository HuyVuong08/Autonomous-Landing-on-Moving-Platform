# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/MFIORequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MFIORequest(genpy.Message):
  _md5sum = "5a9f232a9ad94c1663aa32b8a91f6ba6"
  _type = "dji_osdk_ros/MFIORequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#constant for mode
uint8 MODE_PWM_OUT  = 0
#uint8 MODE_PWM_IN  = 1 #PWM_IN is not functioning correctly
uint8 MODE_GPIO_OUT = 2
uint8 MODE_GPIO_IN  = 3
uint8 MODE_ADC      = 4

uint8 CHANNEL_0 = 0
uint8 CHANNEL_1 = 1
uint8 CHANNEL_2 = 2
uint8 CHANNEL_3 = 3
uint8 CHANNEL_4 = 4
uint8 CHANNEL_5 = 5
uint8 CHANNEL_6 = 6
uint8 CHANNEL_7 = 7

uint8 TURN_ON   = 0     # Control PWM on/off
uint8 TURN_OFF  = 1

#request
uint8 action            # Turn On/Off, 0: ON    1: OFF
uint8 mode              # see constants above for possible modes
bool block              # Block/Non-block Ouput
uint8 channel           # 0-7
uint32 init_on_time_us  # on time for pwm duty cycle in micro-seconds, 0-20000(0%-100%)
uint8 gpio_value        # 0: Low, 1:High just for GPIO_OUT
uint16 pwm_freq         # set pwm frequency in Hz
"""
  # Pseudo-constants
  MODE_PWM_OUT = 0
  MODE_GPIO_OUT = 2
  MODE_GPIO_IN = 3
  MODE_ADC = 4
  CHANNEL_0 = 0
  CHANNEL_1 = 1
  CHANNEL_2 = 2
  CHANNEL_3 = 3
  CHANNEL_4 = 4
  CHANNEL_5 = 5
  CHANNEL_6 = 6
  CHANNEL_7 = 7
  TURN_ON = 0
  TURN_OFF = 1

  __slots__ = ['action','mode','block','channel','init_on_time_us','gpio_value','pwm_freq']
  _slot_types = ['uint8','uint8','bool','uint8','uint32','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action,mode,block,channel,init_on_time_us,gpio_value,pwm_freq

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MFIORequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action is None:
        self.action = 0
      if self.mode is None:
        self.mode = 0
      if self.block is None:
        self.block = False
      if self.channel is None:
        self.channel = 0
      if self.init_on_time_us is None:
        self.init_on_time_us = 0
      if self.gpio_value is None:
        self.gpio_value = 0
      if self.pwm_freq is None:
        self.pwm_freq = 0
    else:
      self.action = 0
      self.mode = 0
      self.block = False
      self.channel = 0
      self.init_on_time_us = 0
      self.gpio_value = 0
      self.pwm_freq = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4BIBH().pack(_x.action, _x.mode, _x.block, _x.channel, _x.init_on_time_us, _x.gpio_value, _x.pwm_freq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.action, _x.mode, _x.block, _x.channel, _x.init_on_time_us, _x.gpio_value, _x.pwm_freq,) = _get_struct_4BIBH().unpack(str[start:end])
      self.block = bool(self.block)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4BIBH().pack(_x.action, _x.mode, _x.block, _x.channel, _x.init_on_time_us, _x.gpio_value, _x.pwm_freq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.action, _x.mode, _x.block, _x.channel, _x.init_on_time_us, _x.gpio_value, _x.pwm_freq,) = _get_struct_4BIBH().unpack(str[start:end])
      self.block = bool(self.block)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4BIBH = None
def _get_struct_4BIBH():
    global _struct_4BIBH
    if _struct_4BIBH is None:
        _struct_4BIBH = struct.Struct("<4BIBH")
    return _struct_4BIBH
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/MFIOResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MFIOResponse(genpy.Message):
  _md5sum = "043ff3265f9d1adda151364edd27337c"
  _type = "dji_osdk_ros/MFIOResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 read_value

"""
  __slots__ = ['read_value']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       read_value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MFIOResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.read_value is None:
        self.read_value = 0
    else:
      self.read_value = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.read_value
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.read_value,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.read_value
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.read_value,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class MFIO(object):
  _type          = 'dji_osdk_ros/MFIO'
  _md5sum = 'd8aa2bbf4f5e4dc56bf0203ba284e596'
  _request_class  = MFIORequest
  _response_class = MFIOResponse
