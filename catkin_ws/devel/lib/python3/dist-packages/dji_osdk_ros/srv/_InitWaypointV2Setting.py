# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/InitWaypointV2SettingRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_osdk_ros.msg

class InitWaypointV2SettingRequest(genpy.Message):
  _md5sum = "6d453cf39ee209bd1279263912725a56"
  _type = "dji_osdk_ros/InitWaypointV2SettingRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#request
WaypointV2InitSetting waypointV2InitSettings
uint16 polygonNum
float32 radius
uint16 actionNum


================================================================================
MSG: dji_osdk_ros/WaypointV2InitSetting
# @brief Waypoint V2 Mission Initialization settings
# @details This is one of the few structs in the OSDK codebase that
# is used in both a sending and a receiving API.

#constant for finishedAction
uint8 DJIWaypointV2MissionFinishedNoAction = 0  # No further action will be taken.
                                                # The aircraft can be controlled by the remote controller.
uint8 DJIWaypointV2MissionFinishedGoHome = 1    # Goes home when the mission is finished. The aircraft will
                                                # land directly if it is within 20 meters away from the home point.
uint8 DJIWaypointV2MissionFinishedAutoLanding = 2  # The aircraft will land automatically at the last waypoint.
uint8 DJIWaypointV2MissionFinishedGoToFirstWaypoint = 3  # The aircraft will go back to the first waypoint and hover.
uint8 DJIWaypointV2MissionFinishedContinueUntilStop = 4  #  When the aircraft reaches its final waypoint, it will hover without ending the
                                                         # mission. The joystick  can still be used to pull the aircraft back along its
                                                         # previous waypoints. The only way this mission  can end is if stopMission is
                                                         # called

#constant for gotoFirstWaypintMode
uint8 DJIWaypointV2MissionGotoFirstWaypointModeSafely = 0 # Go to the waypoint safely. The aircraft will rise to the same altitude of the
                                                          # waypoint if the current  altitude is lower then the waypoint altitude. It then
                                                          # goes to the waypoint coordinate from the current  altitude, and proceeds to the
                                                          # altitude of the waypoint.
uint8 DJIWaypointV2MissionGotoFirstWaypointModePointToPoint = 1 # Go to the waypoint from the current aircraft point to the waypoint directly.


uint32 missionID    # The Mission ID. Use to distinguishã€€different mission
uint16 missTotalLen # The Mission waypoint total length, could not exceed 65535
uint8 repeatTimes   # Mission execution can be repeated more than once. A value of 0 means the mission
                    # only executes once, and does not repeat. A value of 1 means the mission will
                    # execute a total of two times.
uint8 finishedAction # Action the aircraft will take when the waypoint mission is complete.

# While the aircraft is travelling between waypoints, you can offset its speed by
# using the throttle joystick  on the remote controller. `maxFlightSpeed` is this
# offset when the joystick is pushed  to maximum deflection. For example, If
# maxFlightSpeed is 10 m/s, then pushing the throttle joystick all the  way up
# will add 10 m/s to the aircraft speed, while pushing down will subtract 10 m/s
# from the aircraft  speed. If the remote controller stick is not at maximum
# deflection, then the offset speed will be  interpolated between [0,
# `maxFlightSpeed`] with a resolution of 1000 steps. If the  offset speed is
# negative, then the aircraft will fly backwards to previous waypoints. When it
# reaches the  first waypoint, it will then hover in place until a positive speed
# is  applied. `maxFlightSpeed` has a range of [2,15] m/s.
# unit: m/s
float32 maxFlightSpeed

# The base automatic speed of the aircraft as it moves between waypoints with
# range [-15, 15] m/s. The  aircraft's actual speed is a combination of the base
# automatic speed, and the speed control given by  the throttle joystick on the
# remote controller. If `autoFlightSpeed` >0: Actual  speed is `autoFlightSpeed` +
# Joystick Speed (with combined max  of `maxFlightSpeed`) If `autoFlightSpeed` =0:
# Actual speed is  controlled only by the remote controller joystick. If
# `autoFlightSpeed` <0 and the  aircraft is at the first waypoint, the aircraft
# will hover in place until the speed is made positive by  the remote controller
# joystick.
# unit: m/s
float32 autoFlightSpeed

uint8 exitMissionOnRCSignalLost    # Determines whether the mission should stop when connection between the  aircraft
                                   # and remote controller is lost. Default is `NO`.

uint8 gotoFirstWaypointMode        # Defines how the aircraft will go to the first waypoint from its current
                                   # position. Default  is ``DJIWaypointV2MissionV2_DJIWaypointV2MissionGotoWaypointMode_Safely``.

WaypointV2[] mission
================================================================================
MSG: dji_osdk_ros/WaypointV2
# The struct represents a target point in the waypoint mission. For a waypoint

#constant for flightpathMode
uint8 DJIWaypointV2FlightPathModeGoToPointAlongACurve = 0  #In the mission, the aircraft will go to the waypoint along a curve and fly past the waypoint.
uint8 DJIWaypointV2FlightPathModeGoToPointAlongACurveAndStop = 1 #In the mission, the aircraft will go to the waypoint along a curve and stop at the waypoint.
uint8 DJIWaypointV2FlightPathModeGoToPointInAStraightLineAndStop = 2  #In the mission, the aircraft will go to the waypoint along a straight line and stop at the waypoint.
uint8 DJIWaypointV2FlightPathModeCoordinateTurn = 3   #In the mission, the aircraft will fly from the previous waypoint to the next waypoint along a smooth curve without stopping at this waypoint.
                                                      #the next in a curved motion,  adhering to the ``DJIWaypointV2_dampingDistance``, which is
                                                      #set in ``DJIWaypointV2``.
uint8 DJIWaypointV2FlightPathModeGoToFirstPointAlongAStraightLine = 4  # In the mission, the aircraft will go to the first waypoint along a straight line.
                                                                       # This is only valid for the first waypoint.
uint8 DJIWaypointV2FlightPathModeStraightOut = 5   # Straight exit the Last waypoint, Only valid for last waypoint.
uint8 DJIWaypointV2FlightPathModeUnknown = 255    # Unknown

#constant for headMode
uint8 DJIWaypointV2HeadingModeAuto = 0    # Aircraft's heading will always be in the direction of flight.
uint8 DJIWaypointV2HeadingFixed    = 1    # Aircraft's heading will be set to the heading when reaching the first waypoint.
                                          # Before reaching the first waypoint, the aircraft's heading can be controlled by
                                          # the remote controller. When the aircraft reaches the first waypoint, its
                                          # heading will be fixed.
uint8 DJIWaypointV2HeadingManual   = 2    # The aircraft's heading in the mission can be controlled by the remote controller.
uint8 DJIWaypointV2HeadingWaypointCustom = 3  # In the mission, the aircraft's heading will change dynamically and adapt to the heading set at the next waypoint.
                                               # See ``DJIWaypointV2_heading`` to preset the heading.
uint8 DJIWaypointV2HeadingTowardPointOfInterest = 4 # Aircraft's heading will always toward point of interest.
                                                    # using ``DJIWaypointV2_pointOfInterest`` setting point of interest coordiate and ``DJIWaypointV2_pointOfInterestAltitude``
                                                    # setting point of interset altitute.
uint8 DJIWaypointV2HeadingGimbalYawFollow  = 5   # The aircraft's heading rotate simultaneously with its gimbal's yaw.
uint8 DJIWaypointV2HeadingUnknown = 255         # Unknown.

#constant for turnMode
uint8 DJIWaypointV2TurnModeClockwise = 0  # The aircraft's heading rotates clockwise.
uint8 DJIWaypointV2TurnModeCounterClockwise = 1   # The aircraft's heading rotates counterclockwise.
uint8 DJIWaypointV2TurnModeUnknown = 255    # Changes the heading of the aircraft by rotating the aircraft anti-clockwise.



#  mission, a flight route  consists of multiple `WaypointV2` objects.
float64 longitude  # waypoint position relative to WayPointV2InitSettings's reference point.unit: m
float64 latitude
float32 relativeHeight  # relative to takeoff height
uint8   waypointType    # Waypoint flight path mode
uint8   headingMode     # Represents current aircraft's heading mode on current waypoint.
WaypointV2Config  config          # Represents current waypoint's speed config.
uint16  dampingDistance
float32 heading         # The heading to which the aircraft will rotate by the time it reaches the
                        # waypoint. The aircraft heading  will gradually change between two waypoints with
                        # different headings if the waypoint  mission's `headingMode` is set  to
                        # 'DJIWaypointV2_DJIWaypointV2HeadingMode_WaypointCustom`. A heading has a range of
                        # [-180, 180] degrees, where 0 represents True North.
uint8 turnMode          # Determines whether the aircraft will turn clockwise or anticlockwise when
                        # changing its heading.
# Property is used when ``DJIWaypointV2_headingMode`` is
# ``DJIWaypointV2_DJIWaypointV2HeadingMode_TowardPointOfInterest``.
# Aircraft will always be heading to point while executing mission. Default is
# "kCLLocationCoordinate2DInvalid".
float32 positionX       # X distance to reference point, North is positive
float32 positionY       # Y distance to reference point, East is positive
float32 positionZ       # Z distance to reference point, UP is positive

# While the aircraft is travelling between waypoints, you can offset its speed by
# using the throttle joystick on the remote controller. "maxFlightSpeed" is this
# offset when the joystick is pushed to maximum deflection. For example, If
# maxFlightSpeed is 10 m/s, then pushing the throttle joystick all the way up will
# add 10 m/s to the aircraft speed, while pushing down will subtract 10 m/s from
# the aircraft speed. If the remote controller stick is not at maximum deflection,
# then the offset speed will be interpolated between "[0, maxFlightSpeed]"" with a
# resolution of 1000 steps. If the offset speed is negative, then the aircraft
# will fly backwards to previous waypoints. When it reaches the first waypoint, it
# will then hover in place until a positive speed is applied. "maxFlightSpeed" has
# a range of [2,15] m/s.
float32 maxFlightSpeed

# The base automatic speed of the aircraft as it moves between waypoints with
# range [-15, 15] m/s. The aircraft's actual speed is a combination of the base
# automatic speed, and the speed control given by the throttle joystick on the
# remote controller. If "autoFlightSpeed >0": Actual speed is "autoFlightSpeed" +
# Joystick Speed (with combined max of "maxFlightSpeed") If "autoFlightSpeed =0":
# Actual speed is controlled only by the remote controller joystick. If
# autoFlightSpeed <0" and the aircraft is at the first waypoint, the aircraft
# will hover in place until the speed is made positive by the remote controller
# joystick. In flight controller firmware 3.2.10.0 or above, different speeds
# between individual waypoints can also be set in waypoint objects which will
# overwrite "autoFlightSpeed".
float32 autoFlightSpeed
================================================================================
MSG: dji_osdk_ros/WaypointV2Config
# Represents current waypoint's speed config.
# 0: set local waypoint's cruise speed,
# 1: unset global waypoint's cruise speed*/
uint8  useLocalCruiseVel
# 0: set local waypoint's max speed,
# 1: unset global waypoint's max speed*/
uint8  useLocalMaxVel"""
  __slots__ = ['waypointV2InitSettings','polygonNum','radius','actionNum']
  _slot_types = ['dji_osdk_ros/WaypointV2InitSetting','uint16','float32','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waypointV2InitSettings,polygonNum,radius,actionNum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InitWaypointV2SettingRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.waypointV2InitSettings is None:
        self.waypointV2InitSettings = dji_osdk_ros.msg.WaypointV2InitSetting()
      if self.polygonNum is None:
        self.polygonNum = 0
      if self.radius is None:
        self.radius = 0.
      if self.actionNum is None:
        self.actionNum = 0
    else:
      self.waypointV2InitSettings = dji_osdk_ros.msg.WaypointV2InitSetting()
      self.polygonNum = 0
      self.radius = 0.
      self.actionNum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IH2B2f2B().pack(_x.waypointV2InitSettings.missionID, _x.waypointV2InitSettings.missTotalLen, _x.waypointV2InitSettings.repeatTimes, _x.waypointV2InitSettings.finishedAction, _x.waypointV2InitSettings.maxFlightSpeed, _x.waypointV2InitSettings.autoFlightSpeed, _x.waypointV2InitSettings.exitMissionOnRCSignalLost, _x.waypointV2InitSettings.gotoFirstWaypointMode))
      length = len(self.waypointV2InitSettings.mission)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypointV2InitSettings.mission:
        _x = val1
        buff.write(_get_struct_2df2B().pack(_x.longitude, _x.latitude, _x.relativeHeight, _x.waypointType, _x.headingMode))
        _v1 = val1.config
        _x = _v1
        buff.write(_get_struct_2B().pack(_x.useLocalCruiseVel, _x.useLocalMaxVel))
        _x = val1
        buff.write(_get_struct_HfB5f().pack(_x.dampingDistance, _x.heading, _x.turnMode, _x.positionX, _x.positionY, _x.positionZ, _x.maxFlightSpeed, _x.autoFlightSpeed))
      _x = self
      buff.write(_get_struct_HfH().pack(_x.polygonNum, _x.radius, _x.actionNum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypointV2InitSettings is None:
        self.waypointV2InitSettings = dji_osdk_ros.msg.WaypointV2InitSetting()
      end = 0
      _x = self
      start = end
      end += 18
      (_x.waypointV2InitSettings.missionID, _x.waypointV2InitSettings.missTotalLen, _x.waypointV2InitSettings.repeatTimes, _x.waypointV2InitSettings.finishedAction, _x.waypointV2InitSettings.maxFlightSpeed, _x.waypointV2InitSettings.autoFlightSpeed, _x.waypointV2InitSettings.exitMissionOnRCSignalLost, _x.waypointV2InitSettings.gotoFirstWaypointMode,) = _get_struct_IH2B2f2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypointV2InitSettings.mission = []
      for i in range(0, length):
        val1 = dji_osdk_ros.msg.WaypointV2()
        _x = val1
        start = end
        end += 22
        (_x.longitude, _x.latitude, _x.relativeHeight, _x.waypointType, _x.headingMode,) = _get_struct_2df2B().unpack(str[start:end])
        _v2 = val1.config
        _x = _v2
        start = end
        end += 2
        (_x.useLocalCruiseVel, _x.useLocalMaxVel,) = _get_struct_2B().unpack(str[start:end])
        _x = val1
        start = end
        end += 27
        (_x.dampingDistance, _x.heading, _x.turnMode, _x.positionX, _x.positionY, _x.positionZ, _x.maxFlightSpeed, _x.autoFlightSpeed,) = _get_struct_HfB5f().unpack(str[start:end])
        self.waypointV2InitSettings.mission.append(val1)
      _x = self
      start = end
      end += 8
      (_x.polygonNum, _x.radius, _x.actionNum,) = _get_struct_HfH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IH2B2f2B().pack(_x.waypointV2InitSettings.missionID, _x.waypointV2InitSettings.missTotalLen, _x.waypointV2InitSettings.repeatTimes, _x.waypointV2InitSettings.finishedAction, _x.waypointV2InitSettings.maxFlightSpeed, _x.waypointV2InitSettings.autoFlightSpeed, _x.waypointV2InitSettings.exitMissionOnRCSignalLost, _x.waypointV2InitSettings.gotoFirstWaypointMode))
      length = len(self.waypointV2InitSettings.mission)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypointV2InitSettings.mission:
        _x = val1
        buff.write(_get_struct_2df2B().pack(_x.longitude, _x.latitude, _x.relativeHeight, _x.waypointType, _x.headingMode))
        _v3 = val1.config
        _x = _v3
        buff.write(_get_struct_2B().pack(_x.useLocalCruiseVel, _x.useLocalMaxVel))
        _x = val1
        buff.write(_get_struct_HfB5f().pack(_x.dampingDistance, _x.heading, _x.turnMode, _x.positionX, _x.positionY, _x.positionZ, _x.maxFlightSpeed, _x.autoFlightSpeed))
      _x = self
      buff.write(_get_struct_HfH().pack(_x.polygonNum, _x.radius, _x.actionNum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypointV2InitSettings is None:
        self.waypointV2InitSettings = dji_osdk_ros.msg.WaypointV2InitSetting()
      end = 0
      _x = self
      start = end
      end += 18
      (_x.waypointV2InitSettings.missionID, _x.waypointV2InitSettings.missTotalLen, _x.waypointV2InitSettings.repeatTimes, _x.waypointV2InitSettings.finishedAction, _x.waypointV2InitSettings.maxFlightSpeed, _x.waypointV2InitSettings.autoFlightSpeed, _x.waypointV2InitSettings.exitMissionOnRCSignalLost, _x.waypointV2InitSettings.gotoFirstWaypointMode,) = _get_struct_IH2B2f2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypointV2InitSettings.mission = []
      for i in range(0, length):
        val1 = dji_osdk_ros.msg.WaypointV2()
        _x = val1
        start = end
        end += 22
        (_x.longitude, _x.latitude, _x.relativeHeight, _x.waypointType, _x.headingMode,) = _get_struct_2df2B().unpack(str[start:end])
        _v4 = val1.config
        _x = _v4
        start = end
        end += 2
        (_x.useLocalCruiseVel, _x.useLocalMaxVel,) = _get_struct_2B().unpack(str[start:end])
        _x = val1
        start = end
        end += 27
        (_x.dampingDistance, _x.heading, _x.turnMode, _x.positionX, _x.positionY, _x.positionZ, _x.maxFlightSpeed, _x.autoFlightSpeed,) = _get_struct_HfB5f().unpack(str[start:end])
        self.waypointV2InitSettings.mission.append(val1)
      _x = self
      start = end
      end += 8
      (_x.polygonNum, _x.radius, _x.actionNum,) = _get_struct_HfH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2df2B = None
def _get_struct_2df2B():
    global _struct_2df2B
    if _struct_2df2B is None:
        _struct_2df2B = struct.Struct("<2df2B")
    return _struct_2df2B
_struct_HfB5f = None
def _get_struct_HfB5f():
    global _struct_HfB5f
    if _struct_HfB5f is None:
        _struct_HfB5f = struct.Struct("<HfB5f")
    return _struct_HfB5f
_struct_HfH = None
def _get_struct_HfH():
    global _struct_HfH
    if _struct_HfH is None:
        _struct_HfH = struct.Struct("<HfH")
    return _struct_HfH
_struct_IH2B2f2B = None
def _get_struct_IH2B2f2B():
    global _struct_IH2B2f2B
    if _struct_IH2B2f2B is None:
        _struct_IH2B2f2B = struct.Struct("<IH2B2f2B")
    return _struct_IH2B2f2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/InitWaypointV2SettingResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InitWaypointV2SettingResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "dji_osdk_ros/InitWaypointV2SettingResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool result
"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InitWaypointV2SettingResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class InitWaypointV2Setting(object):
  _type          = 'dji_osdk_ros/InitWaypointV2Setting'
  _md5sum = 'f07b42d879472cc58a4d50076253c8e6'
  _request_class  = InitWaypointV2SettingRequest
  _response_class = InitWaypointV2SettingResponse
