# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/WaypointV2AircraftControlActuator.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_osdk_ros.msg

class WaypointV2AircraftControlActuator(genpy.Message):
  _md5sum = "7737a1bd220f9cf26070a870330aaaa8"
  _type = "dji_osdk_ros/WaypointV2AircraftControlActuator"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Parameters for aircraft control actuator. It is valid only when the
# ``DJIWaypointV2Action_DJIWaypointV2Actuator_type`` is
# ``DJIWaypointV2MissionV2_DJIWaypointV2ActionActuatorType_AircraftControl``.
#contant for DJIWaypointV2ActionActuatorAircraftControlOperationType
# Rotates the aircraft's yaw.
uint8 DJIWaypointV2ActionActuatorAircraftControlOperationTypeRotateYaw = 1
# Keeps the aircraft stop flying or start flying.
uint8 DJIWaypointV2ActionActuatorAircraftControlOperationTypeFlyingControl = 2
# Unknown
uint8 DJIWaypointV2ActionActuatorAircraftControlOperationTypeUnknown = 255

uint8 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related
                      # to camera or gimbal and the connected product has multiple gimbals and cameras.
uint16 DJIWaypointV2ActionActuatorAircraftControlOperationType 
WaypointV2AircraftControlActuatorFlying waypointV2AircraftControlActuatorFlying
WaypointV2AircraftControlActuatorRotateHeading waypointV2AircraftControlActuatorRotateHeading
================================================================================
MSG: dji_osdk_ros/WaypointV2AircraftControlActuatorFlying
# This class defines if the aircraft starts or stops the flight.s.
uint8  isStartFlying  # Determines the aircraft start flying or stop flying.
                        # ``TRUE`` for the aircraft to start flying.
================================================================================
MSG: dji_osdk_ros/WaypointV2AircraftControlActuatorRotateHeading
# This class defines how the aircraft rotates on the yaw axis.
  uint8 isRelative # Determines the aircraft rotate heading relative.
                     # if ``TRUE``, when the aircraft is rotating, relative to the current angle.
  float32 yaw # Determines the direction how aircraft changes its heading."""
  # Pseudo-constants
  DJIWaypointV2ActionActuatorAircraftControlOperationTypeRotateYaw = 1
  DJIWaypointV2ActionActuatorAircraftControlOperationTypeFlyingControl = 2
  DJIWaypointV2ActionActuatorAircraftControlOperationTypeUnknown = 255

  __slots__ = ['actuatorIndex','DJIWaypointV2ActionActuatorAircraftControlOperationType','waypointV2AircraftControlActuatorFlying','waypointV2AircraftControlActuatorRotateHeading']
  _slot_types = ['uint8','uint16','dji_osdk_ros/WaypointV2AircraftControlActuatorFlying','dji_osdk_ros/WaypointV2AircraftControlActuatorRotateHeading']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       actuatorIndex,DJIWaypointV2ActionActuatorAircraftControlOperationType,waypointV2AircraftControlActuatorFlying,waypointV2AircraftControlActuatorRotateHeading

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointV2AircraftControlActuator, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.actuatorIndex is None:
        self.actuatorIndex = 0
      if self.DJIWaypointV2ActionActuatorAircraftControlOperationType is None:
        self.DJIWaypointV2ActionActuatorAircraftControlOperationType = 0
      if self.waypointV2AircraftControlActuatorFlying is None:
        self.waypointV2AircraftControlActuatorFlying = dji_osdk_ros.msg.WaypointV2AircraftControlActuatorFlying()
      if self.waypointV2AircraftControlActuatorRotateHeading is None:
        self.waypointV2AircraftControlActuatorRotateHeading = dji_osdk_ros.msg.WaypointV2AircraftControlActuatorRotateHeading()
    else:
      self.actuatorIndex = 0
      self.DJIWaypointV2ActionActuatorAircraftControlOperationType = 0
      self.waypointV2AircraftControlActuatorFlying = dji_osdk_ros.msg.WaypointV2AircraftControlActuatorFlying()
      self.waypointV2AircraftControlActuatorRotateHeading = dji_osdk_ros.msg.WaypointV2AircraftControlActuatorRotateHeading()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BH2Bf().pack(_x.actuatorIndex, _x.DJIWaypointV2ActionActuatorAircraftControlOperationType, _x.waypointV2AircraftControlActuatorFlying.isStartFlying, _x.waypointV2AircraftControlActuatorRotateHeading.isRelative, _x.waypointV2AircraftControlActuatorRotateHeading.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypointV2AircraftControlActuatorFlying is None:
        self.waypointV2AircraftControlActuatorFlying = dji_osdk_ros.msg.WaypointV2AircraftControlActuatorFlying()
      if self.waypointV2AircraftControlActuatorRotateHeading is None:
        self.waypointV2AircraftControlActuatorRotateHeading = dji_osdk_ros.msg.WaypointV2AircraftControlActuatorRotateHeading()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.actuatorIndex, _x.DJIWaypointV2ActionActuatorAircraftControlOperationType, _x.waypointV2AircraftControlActuatorFlying.isStartFlying, _x.waypointV2AircraftControlActuatorRotateHeading.isRelative, _x.waypointV2AircraftControlActuatorRotateHeading.yaw,) = _get_struct_BH2Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BH2Bf().pack(_x.actuatorIndex, _x.DJIWaypointV2ActionActuatorAircraftControlOperationType, _x.waypointV2AircraftControlActuatorFlying.isStartFlying, _x.waypointV2AircraftControlActuatorRotateHeading.isRelative, _x.waypointV2AircraftControlActuatorRotateHeading.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypointV2AircraftControlActuatorFlying is None:
        self.waypointV2AircraftControlActuatorFlying = dji_osdk_ros.msg.WaypointV2AircraftControlActuatorFlying()
      if self.waypointV2AircraftControlActuatorRotateHeading is None:
        self.waypointV2AircraftControlActuatorRotateHeading = dji_osdk_ros.msg.WaypointV2AircraftControlActuatorRotateHeading()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.actuatorIndex, _x.DJIWaypointV2ActionActuatorAircraftControlOperationType, _x.waypointV2AircraftControlActuatorFlying.isStartFlying, _x.waypointV2AircraftControlActuatorRotateHeading.isRelative, _x.waypointV2AircraftControlActuatorRotateHeading.yaw,) = _get_struct_BH2Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BH2Bf = None
def _get_struct_BH2Bf():
    global _struct_BH2Bf
    if _struct_BH2Bf is None:
        _struct_BH2Bf = struct.Struct("<BH2Bf")
    return _struct_BH2Bf
