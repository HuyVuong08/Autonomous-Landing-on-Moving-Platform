# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/BatteryWholeInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_osdk_ros.msg

class BatteryWholeInfo(genpy.Message):
  _md5sum = "7e822abf802642ce971495ff2b95946b"
  _type = "dji_osdk_ros/BatteryWholeInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16  remainFlyTime             # remain fly time(s)
uint16  goHomeNeedTime            # Time required for the gohome flight (s)
uint16  landNeedTime              # Time required for the land flight (s).max value:100*/
uint16  goHomeNeedCapacity        # Capacity required for the gohome flight (%).max value:100*/
uint16  landNeedCapacity          # Capacity required for the land flight (%).max value:100*/
float32 safeFlyRadius             # Safe flight area radius (m)*/
float32 capacityConsumeSpeed      # (mAh/sec)*/
BatteryState batteryState
uint8   goHomeCountDownState      # Countdown status of smart battery gohome
                                   # 0/2:not in gohome state
                                   # 1  :in gohome state
                                   #
uint8   gohomeCountDownvalue      # uint:s.max value:10
uint16  voltage                   # mv
uint8   batteryCapacityPercentage # uint:%.max value:100
uint8   lowBatteryAlarmThreshold
uint8   lowBatteryAlarmEnable
uint8   seriousLowBatteryAlarmThreshold
uint8   seriousLowBatteryAlarmEnable  
================================================================================
MSG: dji_osdk_ros/BatteryState
uint8 voltageNotSafety # Generally caused by low temperature, the battery has electricity,
                       # but the battery voltage is too low.
uint8 veryLowVoltageAlarm
uint8 LowVoltageAlarm
uint8 seriousLowCapacityAlarm
uint8 LowCapacityAlarm"""
  __slots__ = ['remainFlyTime','goHomeNeedTime','landNeedTime','goHomeNeedCapacity','landNeedCapacity','safeFlyRadius','capacityConsumeSpeed','batteryState','goHomeCountDownState','gohomeCountDownvalue','voltage','batteryCapacityPercentage','lowBatteryAlarmThreshold','lowBatteryAlarmEnable','seriousLowBatteryAlarmThreshold','seriousLowBatteryAlarmEnable']
  _slot_types = ['uint16','uint16','uint16','uint16','uint16','float32','float32','dji_osdk_ros/BatteryState','uint8','uint8','uint16','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       remainFlyTime,goHomeNeedTime,landNeedTime,goHomeNeedCapacity,landNeedCapacity,safeFlyRadius,capacityConsumeSpeed,batteryState,goHomeCountDownState,gohomeCountDownvalue,voltage,batteryCapacityPercentage,lowBatteryAlarmThreshold,lowBatteryAlarmEnable,seriousLowBatteryAlarmThreshold,seriousLowBatteryAlarmEnable

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BatteryWholeInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.remainFlyTime is None:
        self.remainFlyTime = 0
      if self.goHomeNeedTime is None:
        self.goHomeNeedTime = 0
      if self.landNeedTime is None:
        self.landNeedTime = 0
      if self.goHomeNeedCapacity is None:
        self.goHomeNeedCapacity = 0
      if self.landNeedCapacity is None:
        self.landNeedCapacity = 0
      if self.safeFlyRadius is None:
        self.safeFlyRadius = 0.
      if self.capacityConsumeSpeed is None:
        self.capacityConsumeSpeed = 0.
      if self.batteryState is None:
        self.batteryState = dji_osdk_ros.msg.BatteryState()
      if self.goHomeCountDownState is None:
        self.goHomeCountDownState = 0
      if self.gohomeCountDownvalue is None:
        self.gohomeCountDownvalue = 0
      if self.voltage is None:
        self.voltage = 0
      if self.batteryCapacityPercentage is None:
        self.batteryCapacityPercentage = 0
      if self.lowBatteryAlarmThreshold is None:
        self.lowBatteryAlarmThreshold = 0
      if self.lowBatteryAlarmEnable is None:
        self.lowBatteryAlarmEnable = 0
      if self.seriousLowBatteryAlarmThreshold is None:
        self.seriousLowBatteryAlarmThreshold = 0
      if self.seriousLowBatteryAlarmEnable is None:
        self.seriousLowBatteryAlarmEnable = 0
    else:
      self.remainFlyTime = 0
      self.goHomeNeedTime = 0
      self.landNeedTime = 0
      self.goHomeNeedCapacity = 0
      self.landNeedCapacity = 0
      self.safeFlyRadius = 0.
      self.capacityConsumeSpeed = 0.
      self.batteryState = dji_osdk_ros.msg.BatteryState()
      self.goHomeCountDownState = 0
      self.gohomeCountDownvalue = 0
      self.voltage = 0
      self.batteryCapacityPercentage = 0
      self.lowBatteryAlarmThreshold = 0
      self.lowBatteryAlarmEnable = 0
      self.seriousLowBatteryAlarmThreshold = 0
      self.seriousLowBatteryAlarmEnable = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5H2f7BH5B().pack(_x.remainFlyTime, _x.goHomeNeedTime, _x.landNeedTime, _x.goHomeNeedCapacity, _x.landNeedCapacity, _x.safeFlyRadius, _x.capacityConsumeSpeed, _x.batteryState.voltageNotSafety, _x.batteryState.veryLowVoltageAlarm, _x.batteryState.LowVoltageAlarm, _x.batteryState.seriousLowCapacityAlarm, _x.batteryState.LowCapacityAlarm, _x.goHomeCountDownState, _x.gohomeCountDownvalue, _x.voltage, _x.batteryCapacityPercentage, _x.lowBatteryAlarmThreshold, _x.lowBatteryAlarmEnable, _x.seriousLowBatteryAlarmThreshold, _x.seriousLowBatteryAlarmEnable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.batteryState is None:
        self.batteryState = dji_osdk_ros.msg.BatteryState()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.remainFlyTime, _x.goHomeNeedTime, _x.landNeedTime, _x.goHomeNeedCapacity, _x.landNeedCapacity, _x.safeFlyRadius, _x.capacityConsumeSpeed, _x.batteryState.voltageNotSafety, _x.batteryState.veryLowVoltageAlarm, _x.batteryState.LowVoltageAlarm, _x.batteryState.seriousLowCapacityAlarm, _x.batteryState.LowCapacityAlarm, _x.goHomeCountDownState, _x.gohomeCountDownvalue, _x.voltage, _x.batteryCapacityPercentage, _x.lowBatteryAlarmThreshold, _x.lowBatteryAlarmEnable, _x.seriousLowBatteryAlarmThreshold, _x.seriousLowBatteryAlarmEnable,) = _get_struct_5H2f7BH5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5H2f7BH5B().pack(_x.remainFlyTime, _x.goHomeNeedTime, _x.landNeedTime, _x.goHomeNeedCapacity, _x.landNeedCapacity, _x.safeFlyRadius, _x.capacityConsumeSpeed, _x.batteryState.voltageNotSafety, _x.batteryState.veryLowVoltageAlarm, _x.batteryState.LowVoltageAlarm, _x.batteryState.seriousLowCapacityAlarm, _x.batteryState.LowCapacityAlarm, _x.goHomeCountDownState, _x.gohomeCountDownvalue, _x.voltage, _x.batteryCapacityPercentage, _x.lowBatteryAlarmThreshold, _x.lowBatteryAlarmEnable, _x.seriousLowBatteryAlarmThreshold, _x.seriousLowBatteryAlarmEnable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.batteryState is None:
        self.batteryState = dji_osdk_ros.msg.BatteryState()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.remainFlyTime, _x.goHomeNeedTime, _x.landNeedTime, _x.goHomeNeedCapacity, _x.landNeedCapacity, _x.safeFlyRadius, _x.capacityConsumeSpeed, _x.batteryState.voltageNotSafety, _x.batteryState.veryLowVoltageAlarm, _x.batteryState.LowVoltageAlarm, _x.batteryState.seriousLowCapacityAlarm, _x.batteryState.LowCapacityAlarm, _x.goHomeCountDownState, _x.gohomeCountDownvalue, _x.voltage, _x.batteryCapacityPercentage, _x.lowBatteryAlarmThreshold, _x.lowBatteryAlarmEnable, _x.seriousLowBatteryAlarmThreshold, _x.seriousLowBatteryAlarmEnable,) = _get_struct_5H2f7BH5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5H2f7BH5B = None
def _get_struct_5H2f7BH5B():
    global _struct_5H2f7BH5B
    if _struct_5H2f7BH5B is None:
        _struct_5H2f7BH5B = struct.Struct("<5H2f7BH5B")
    return _struct_5H2f7BH5B
