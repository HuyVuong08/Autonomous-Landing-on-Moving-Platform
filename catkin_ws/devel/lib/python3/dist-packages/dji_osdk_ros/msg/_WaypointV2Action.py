# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/WaypointV2Action.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_osdk_ros.msg

class WaypointV2Action(genpy.Message):
  _md5sum = "534513cf5f6d88161086ab7b39716b16"
  _type = "dji_osdk_ros/WaypointV2Action"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This class represents an action for ``DJIWaypointV2Mission``. It
# determines how action is performed when a waypoint mission is executed.

# The action will be triggered when action associated executes.
# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2AssociateTriggerParam``.
uint8 DJIWaypointV2ActionTriggerTypeActionAssociated = 2

# The action will be triggered when the aircraft flies from one waypoint to the next.
# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2TrajectoryTriggerParam``.
uint8 DJIWaypointV2ActionTriggerTypeTrajectory = 3

# The action will be triggered when the aircraft flies between two waypoints
# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2IntervalTriggerParam``.
uint8 DJIWaypointV2ActionTriggerTypeInterval = 4
uint8 DJIWaypointV2ActionTriggerTypeSampleReachPoint = 5

# Unknown
uint8 DJIWaypointV2ActionTriggerTypeUnknown = 255

#contant for waypointV2ActuatorTriggerType
# The action will be executed by the camera.
# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.
uint8 DJIWaypointV2ActionActuatorTypeCamera = 1

# The action will be executed by the gimbal.
# The parameters should be defined by ``DJIWaypointV2Action_DJIWaypointV2GimbalActuatorParam``.
uint8 DJIWaypointV2ActionActuatorTypeGimbal = 2

# The action will executes by control aircraft.
# The parameters should be setting by ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.
uint8 DJIWaypointV2ActionActuatorTypeAircraftControl = 4

# Unknown actuator type.
uint8 DJIWaypointV2ActionActuatorTypeUnknown = 255

uint16 actionId # The ID of Action.

uint8 waypointV2ActionTriggerType
uint8 waypointV2ACtionActuatorType

# The trigger of action.You can only choose one to config
WaypointV2AssociateTrigger waypointV2AssociateTrigger
WaypointV2IntervalTrigger waypointV2IntervalTrigger
WaypointV2TrajectoryTrigger waypointV2TrajectoryTrigger
WaypointV2SampleReachPointTrigger waypointV2SampleReachPointTrigger

 # The actuator of action.You can only choose one to config
WaypointV2CameraActuator waypointV2CameraActuator
WaypointV2GimbalActuator waypointV2GimbalActuator
WaypointV2AircraftControlActuator waypointV2AircraftControlActuator
================================================================================
MSG: dji_osdk_ros/WaypointV2AssociateTrigger
#contant for actionAssociatedType
uint8 DJIWaypointV2TriggerAssociatedTimingTypeSimultaneously = 1  # The trigger starts simultaneously with the trigger that is associated.
uint8 DJIWaypointV2TriggerAssociatedTimingTypeAfterFinised = 2    # The trigger starts after the trigger associated has finished.
uint8 DJIWaypointV2TriggerAssociatedTimingTypeUnknown = 255       # Unkown timing type.

uint8 actionAssociatedType  # The type of assciate trigger.
uint8 waitingTime           # Waiting time in seconds after ActionTrigger starts.
uint16 actionIdAssociated # Associated action ID.
================================================================================
MSG: dji_osdk_ros/WaypointV2IntervalTrigger
#constant for actionIntervalType
uint8 DJIWaypointV2ActionIntervalTypeTime     = 1  # The action will be repeated after a particular period of time.
uint8 DJIWaypointV2ActionIntervalTypeDistance = 2  # The action will be repeated after a particular distance.
uint8 DJIWaypointV2ActionIntervalTypeUnknown  = 255 # Unknown action trigger type.

uint16 startIndex # It determines the index of the waypoint at which the trigger starts.
# If the  ``DJIWaypointV2Action_DJIWaypointV2IntervalTriggerParam_actionIntervalType``
# is ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_Time``
# The time interval in seconds when two action are executed as the aircraft moves
# from the current waypoint to the next waypoint.
# If the ``DJIWaypointV2Action_DJIWaypointV2IntervalTriggerParam_actionIntervalType`` is
# ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_Distance``
# The distance interval in meters when two action are executed as the aircraft moves
# from the current waypoint to the next waypoint.
uint16 interval
uint8 actionIntervalType # The type of interval trigger.
                         # See ``DJIWaypointV2MissionV2_DJIWaypointV2ActionIntervalType``.
================================================================================
MSG: dji_osdk_ros/WaypointV2TrajectoryTrigger
# This class represents a trajectory trigger action when should be trigger.

uint16 startIndex # It determines the index of the waypoint at which the trigger starts.
uint16 endIndex   # It determines the waypoint when the trigger stops.


================================================================================
MSG: dji_osdk_ros/WaypointV2SampleReachPointTrigger
uint16 waypointIndex # It determines the index of the waypoint at which the action will be triggered.
uint16 terminateNum

================================================================================
MSG: dji_osdk_ros/WaypointV2CameraActuator
# This determines how the camera will be performed when a waypoint mission is executing.
#constant for DJIWaypointV2ActionActuatorCameraOperationType
# Starts to shoot a photo.
uint16 DJIWaypointV2ActionActuatorCameraOperationTypeTakePhoto = 1
# Starts to record a video.
uint16 DJIWaypointV2ActionActuatorCameraOperationTypeStartRecordVideo = 2
# Stops to record a video.
uint16 DJIWaypointV2ActionActuatorCameraOperationTypeStopRecordVideo = 3
# Starts focus.
uint16 DJIWaypointV2ActionActuatorCameraOperationTypeFocus = 4
# Starts focal lenth. Only support those support flocal lenth cameras.
uint16 DJIWaypointV2ActionActuatorCameraOperationTypeFocalLength = 5

uint16 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related
                      # to camera or gimbal and the connected product has multiple gimbals and cameras.

uint16 DJIWaypointV2ActionActuatorCameraOperationType
# you can only choose one to config.
WaypointV2CameraActuatorFocusParam focusParam  # The parameters for camera focus operation. It is valid only when
                                       # ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam_operationType`` is
                                       # ``DJIWaypointV2MissionV2_DJIWaypointV2ActionActuatorCameraOperationType_Focus``
WaypointV2CameraActuatorFocalLengthParam zoomParam # The parameters for camera focus length operation. It is valid only when
                                           # ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam_operationType`` is
                                           # ``DJIWaypointV2MissionV2_DJIWaypointV2ActionActuatorCameraOperationType_FocalLength``
================================================================================
MSG: dji_osdk_ros/WaypointV2CameraActuatorFocusParam
# This class defines a camera focus operation for ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.
# The lens focus target point. When the focus mode is auto, the target point
# is the focal point. When the focus mode is manual, the target point is the zoom
# out area if the focus assistant is enabled for the manual mode.
#  The range for x and y is from 0.0 to 1.0. The point [0.0, 0.0] represents the top-left angle of the screen.
  
  float32 x # x axis focus point value.range: [0,1]
  float32 y # y axis focus point value.range: [0,1]
  uint8 regionType #focus type:0:point focus,1:rectangle focus
  float32 width #Normalized focus area width(0,1)
  float32 height # Normalized focus area height(0,1)
  uint8 retryTimes = 1
================================================================================
MSG: dji_osdk_ros/WaypointV2CameraActuatorFocalLengthParam
# This class defines a camera focal length operation for  ``DJIWaypointV2Action_DJIWaypointV2CameraActuatorParam``.
# Focal length of zoom lens. Valid range is [``DJICamera_DJICameraOpticalZoomSpec_minFocalLength``,
# ``DJICamera_DJICameraOpticalZoomSpec_minFocalLength``] and must be a multiple of
# ``DJICamera_DJICameraOpticalZoomSpec_focalLengthStep``.
#  Only support by those camera ``DJICamera_CameraSettings_isOpticalZoomSupported`` return ``TRUE``.
  uint16 focalLength

  uint8 retryTimes = 1
================================================================================
MSG: dji_osdk_ros/WaypointV2GimbalActuator
# gimbal actuator will be performed when a waypoint mission is executed.
#constant for DJIWaypointV2ActionActuatorGimbalOperationType
# Rotates the gimbal. Only valid when the trigger type is
# ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_ReachPoint``.
uint8 DJIWaypointV2ActionActuatorGimbalOperationTypeRotateGimbal = 1
# Unknown
uint8 DJIWaypointV2ActionActuatorGimbalOperationTypeUnknown = 255

uint8 DJIWaypointV2ActionActuatorGimbalOperationType
uint16 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related
                      # to camera or gimbal and the connected product has multiple gimbals and cameras.
WaypointV2GimbalActuatorRotationParam waypointV2GimbalActuatorRotationParam # The operation type of gimbal actuator.
================================================================================
MSG: dji_osdk_ros/WaypointV2GimbalActuatorRotationParam
  int16 x             # gimbal roll angle,  unit: 0.1 deg,range:[-3600, 3600]*/
  int16 y             # gimbal pitch angle, unit: 0.1 deg,range:[-3600, 3600]*/
  int16 z             # gimbal yaw angle,   unit: 0.1 deg,range:[-3600, 3600]*/
  uint8 ctrl_mode     # 0: absolute position control, 1:relative position control*/
  uint8 rollCmdIgnore # 0: roll command normal,  1: roll command ignore*/
  uint8 pitchCmdIgnore# 0: pitch command normal,  1: pitch command ignore*/
  uint8 yawCmdIgnore  # 0: yaw command normal,  1: yaw command ignore*/
  uint8 absYawModeRef # 0: absoluate rotate yaw relative to aircraft,
                      #  1: absoluate rotate yaw relative to North*/
  uint8 duationTime    # 0: rotate time,unit:0.1s, range[1,255]*/
================================================================================
MSG: dji_osdk_ros/WaypointV2AircraftControlActuator
# Parameters for aircraft control actuator. It is valid only when the
# ``DJIWaypointV2Action_DJIWaypointV2Actuator_type`` is
# ``DJIWaypointV2MissionV2_DJIWaypointV2ActionActuatorType_AircraftControl``.
#contant for DJIWaypointV2ActionActuatorAircraftControlOperationType
# Rotates the aircraft's yaw.
uint8 DJIWaypointV2ActionActuatorAircraftControlOperationTypeRotateYaw = 1
# Keeps the aircraft stop flying or start flying.
uint8 DJIWaypointV2ActionActuatorAircraftControlOperationTypeFlyingControl = 2
# Unknown
uint8 DJIWaypointV2ActionActuatorAircraftControlOperationTypeUnknown = 255

uint8 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related
                      # to camera or gimbal and the connected product has multiple gimbals and cameras.
uint16 DJIWaypointV2ActionActuatorAircraftControlOperationType 
WaypointV2AircraftControlActuatorFlying waypointV2AircraftControlActuatorFlying
WaypointV2AircraftControlActuatorRotateHeading waypointV2AircraftControlActuatorRotateHeading
================================================================================
MSG: dji_osdk_ros/WaypointV2AircraftControlActuatorFlying
# This class defines if the aircraft starts or stops the flight.s.
uint8  isStartFlying  # Determines the aircraft start flying or stop flying.
                        # ``TRUE`` for the aircraft to start flying.
================================================================================
MSG: dji_osdk_ros/WaypointV2AircraftControlActuatorRotateHeading
# This class defines how the aircraft rotates on the yaw axis.
  uint8 isRelative # Determines the aircraft rotate heading relative.
                     # if ``TRUE``, when the aircraft is rotating, relative to the current angle.
  float32 yaw # Determines the direction how aircraft changes its heading."""
  # Pseudo-constants
  DJIWaypointV2ActionTriggerTypeActionAssociated = 2
  DJIWaypointV2ActionTriggerTypeTrajectory = 3
  DJIWaypointV2ActionTriggerTypeInterval = 4
  DJIWaypointV2ActionTriggerTypeSampleReachPoint = 5
  DJIWaypointV2ActionTriggerTypeUnknown = 255
  DJIWaypointV2ActionActuatorTypeCamera = 1
  DJIWaypointV2ActionActuatorTypeGimbal = 2
  DJIWaypointV2ActionActuatorTypeAircraftControl = 4
  DJIWaypointV2ActionActuatorTypeUnknown = 255

  __slots__ = ['actionId','waypointV2ActionTriggerType','waypointV2ACtionActuatorType','waypointV2AssociateTrigger','waypointV2IntervalTrigger','waypointV2TrajectoryTrigger','waypointV2SampleReachPointTrigger','waypointV2CameraActuator','waypointV2GimbalActuator','waypointV2AircraftControlActuator']
  _slot_types = ['uint16','uint8','uint8','dji_osdk_ros/WaypointV2AssociateTrigger','dji_osdk_ros/WaypointV2IntervalTrigger','dji_osdk_ros/WaypointV2TrajectoryTrigger','dji_osdk_ros/WaypointV2SampleReachPointTrigger','dji_osdk_ros/WaypointV2CameraActuator','dji_osdk_ros/WaypointV2GimbalActuator','dji_osdk_ros/WaypointV2AircraftControlActuator']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       actionId,waypointV2ActionTriggerType,waypointV2ACtionActuatorType,waypointV2AssociateTrigger,waypointV2IntervalTrigger,waypointV2TrajectoryTrigger,waypointV2SampleReachPointTrigger,waypointV2CameraActuator,waypointV2GimbalActuator,waypointV2AircraftControlActuator

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointV2Action, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.actionId is None:
        self.actionId = 0
      if self.waypointV2ActionTriggerType is None:
        self.waypointV2ActionTriggerType = 0
      if self.waypointV2ACtionActuatorType is None:
        self.waypointV2ACtionActuatorType = 0
      if self.waypointV2AssociateTrigger is None:
        self.waypointV2AssociateTrigger = dji_osdk_ros.msg.WaypointV2AssociateTrigger()
      if self.waypointV2IntervalTrigger is None:
        self.waypointV2IntervalTrigger = dji_osdk_ros.msg.WaypointV2IntervalTrigger()
      if self.waypointV2TrajectoryTrigger is None:
        self.waypointV2TrajectoryTrigger = dji_osdk_ros.msg.WaypointV2TrajectoryTrigger()
      if self.waypointV2SampleReachPointTrigger is None:
        self.waypointV2SampleReachPointTrigger = dji_osdk_ros.msg.WaypointV2SampleReachPointTrigger()
      if self.waypointV2CameraActuator is None:
        self.waypointV2CameraActuator = dji_osdk_ros.msg.WaypointV2CameraActuator()
      if self.waypointV2GimbalActuator is None:
        self.waypointV2GimbalActuator = dji_osdk_ros.msg.WaypointV2GimbalActuator()
      if self.waypointV2AircraftControlActuator is None:
        self.waypointV2AircraftControlActuator = dji_osdk_ros.msg.WaypointV2AircraftControlActuator()
    else:
      self.actionId = 0
      self.waypointV2ActionTriggerType = 0
      self.waypointV2ACtionActuatorType = 0
      self.waypointV2AssociateTrigger = dji_osdk_ros.msg.WaypointV2AssociateTrigger()
      self.waypointV2IntervalTrigger = dji_osdk_ros.msg.WaypointV2IntervalTrigger()
      self.waypointV2TrajectoryTrigger = dji_osdk_ros.msg.WaypointV2TrajectoryTrigger()
      self.waypointV2SampleReachPointTrigger = dji_osdk_ros.msg.WaypointV2SampleReachPointTrigger()
      self.waypointV2CameraActuator = dji_osdk_ros.msg.WaypointV2CameraActuator()
      self.waypointV2GimbalActuator = dji_osdk_ros.msg.WaypointV2GimbalActuator()
      self.waypointV2AircraftControlActuator = dji_osdk_ros.msg.WaypointV2AircraftControlActuator()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H4B3HB6H2fB2fHBH3h7BH2Bf().pack(_x.actionId, _x.waypointV2ActionTriggerType, _x.waypointV2ACtionActuatorType, _x.waypointV2AssociateTrigger.actionAssociatedType, _x.waypointV2AssociateTrigger.waitingTime, _x.waypointV2AssociateTrigger.actionIdAssociated, _x.waypointV2IntervalTrigger.startIndex, _x.waypointV2IntervalTrigger.interval, _x.waypointV2IntervalTrigger.actionIntervalType, _x.waypointV2TrajectoryTrigger.startIndex, _x.waypointV2TrajectoryTrigger.endIndex, _x.waypointV2SampleReachPointTrigger.waypointIndex, _x.waypointV2SampleReachPointTrigger.terminateNum, _x.waypointV2CameraActuator.actuatorIndex, _x.waypointV2CameraActuator.DJIWaypointV2ActionActuatorCameraOperationType, _x.waypointV2CameraActuator.focusParam.x, _x.waypointV2CameraActuator.focusParam.y, _x.waypointV2CameraActuator.focusParam.regionType, _x.waypointV2CameraActuator.focusParam.width, _x.waypointV2CameraActuator.focusParam.height, _x.waypointV2CameraActuator.zoomParam.focalLength, _x.waypointV2GimbalActuator.DJIWaypointV2ActionActuatorGimbalOperationType, _x.waypointV2GimbalActuator.actuatorIndex, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.x, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.y, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.z, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.ctrl_mode, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.rollCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.pitchCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.yawCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.absYawModeRef, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.duationTime, _x.waypointV2AircraftControlActuator.actuatorIndex, _x.waypointV2AircraftControlActuator.DJIWaypointV2ActionActuatorAircraftControlOperationType, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorFlying.isStartFlying, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorRotateHeading.isRelative, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorRotateHeading.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypointV2AssociateTrigger is None:
        self.waypointV2AssociateTrigger = dji_osdk_ros.msg.WaypointV2AssociateTrigger()
      if self.waypointV2IntervalTrigger is None:
        self.waypointV2IntervalTrigger = dji_osdk_ros.msg.WaypointV2IntervalTrigger()
      if self.waypointV2TrajectoryTrigger is None:
        self.waypointV2TrajectoryTrigger = dji_osdk_ros.msg.WaypointV2TrajectoryTrigger()
      if self.waypointV2SampleReachPointTrigger is None:
        self.waypointV2SampleReachPointTrigger = dji_osdk_ros.msg.WaypointV2SampleReachPointTrigger()
      if self.waypointV2CameraActuator is None:
        self.waypointV2CameraActuator = dji_osdk_ros.msg.WaypointV2CameraActuator()
      if self.waypointV2GimbalActuator is None:
        self.waypointV2GimbalActuator = dji_osdk_ros.msg.WaypointV2GimbalActuator()
      if self.waypointV2AircraftControlActuator is None:
        self.waypointV2AircraftControlActuator = dji_osdk_ros.msg.WaypointV2AircraftControlActuator()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.actionId, _x.waypointV2ActionTriggerType, _x.waypointV2ACtionActuatorType, _x.waypointV2AssociateTrigger.actionAssociatedType, _x.waypointV2AssociateTrigger.waitingTime, _x.waypointV2AssociateTrigger.actionIdAssociated, _x.waypointV2IntervalTrigger.startIndex, _x.waypointV2IntervalTrigger.interval, _x.waypointV2IntervalTrigger.actionIntervalType, _x.waypointV2TrajectoryTrigger.startIndex, _x.waypointV2TrajectoryTrigger.endIndex, _x.waypointV2SampleReachPointTrigger.waypointIndex, _x.waypointV2SampleReachPointTrigger.terminateNum, _x.waypointV2CameraActuator.actuatorIndex, _x.waypointV2CameraActuator.DJIWaypointV2ActionActuatorCameraOperationType, _x.waypointV2CameraActuator.focusParam.x, _x.waypointV2CameraActuator.focusParam.y, _x.waypointV2CameraActuator.focusParam.regionType, _x.waypointV2CameraActuator.focusParam.width, _x.waypointV2CameraActuator.focusParam.height, _x.waypointV2CameraActuator.zoomParam.focalLength, _x.waypointV2GimbalActuator.DJIWaypointV2ActionActuatorGimbalOperationType, _x.waypointV2GimbalActuator.actuatorIndex, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.x, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.y, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.z, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.ctrl_mode, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.rollCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.pitchCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.yawCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.absYawModeRef, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.duationTime, _x.waypointV2AircraftControlActuator.actuatorIndex, _x.waypointV2AircraftControlActuator.DJIWaypointV2ActionActuatorAircraftControlOperationType, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorFlying.isStartFlying, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorRotateHeading.isRelative, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorRotateHeading.yaw,) = _get_struct_H4B3HB6H2fB2fHBH3h7BH2Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H4B3HB6H2fB2fHBH3h7BH2Bf().pack(_x.actionId, _x.waypointV2ActionTriggerType, _x.waypointV2ACtionActuatorType, _x.waypointV2AssociateTrigger.actionAssociatedType, _x.waypointV2AssociateTrigger.waitingTime, _x.waypointV2AssociateTrigger.actionIdAssociated, _x.waypointV2IntervalTrigger.startIndex, _x.waypointV2IntervalTrigger.interval, _x.waypointV2IntervalTrigger.actionIntervalType, _x.waypointV2TrajectoryTrigger.startIndex, _x.waypointV2TrajectoryTrigger.endIndex, _x.waypointV2SampleReachPointTrigger.waypointIndex, _x.waypointV2SampleReachPointTrigger.terminateNum, _x.waypointV2CameraActuator.actuatorIndex, _x.waypointV2CameraActuator.DJIWaypointV2ActionActuatorCameraOperationType, _x.waypointV2CameraActuator.focusParam.x, _x.waypointV2CameraActuator.focusParam.y, _x.waypointV2CameraActuator.focusParam.regionType, _x.waypointV2CameraActuator.focusParam.width, _x.waypointV2CameraActuator.focusParam.height, _x.waypointV2CameraActuator.zoomParam.focalLength, _x.waypointV2GimbalActuator.DJIWaypointV2ActionActuatorGimbalOperationType, _x.waypointV2GimbalActuator.actuatorIndex, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.x, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.y, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.z, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.ctrl_mode, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.rollCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.pitchCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.yawCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.absYawModeRef, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.duationTime, _x.waypointV2AircraftControlActuator.actuatorIndex, _x.waypointV2AircraftControlActuator.DJIWaypointV2ActionActuatorAircraftControlOperationType, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorFlying.isStartFlying, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorRotateHeading.isRelative, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorRotateHeading.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypointV2AssociateTrigger is None:
        self.waypointV2AssociateTrigger = dji_osdk_ros.msg.WaypointV2AssociateTrigger()
      if self.waypointV2IntervalTrigger is None:
        self.waypointV2IntervalTrigger = dji_osdk_ros.msg.WaypointV2IntervalTrigger()
      if self.waypointV2TrajectoryTrigger is None:
        self.waypointV2TrajectoryTrigger = dji_osdk_ros.msg.WaypointV2TrajectoryTrigger()
      if self.waypointV2SampleReachPointTrigger is None:
        self.waypointV2SampleReachPointTrigger = dji_osdk_ros.msg.WaypointV2SampleReachPointTrigger()
      if self.waypointV2CameraActuator is None:
        self.waypointV2CameraActuator = dji_osdk_ros.msg.WaypointV2CameraActuator()
      if self.waypointV2GimbalActuator is None:
        self.waypointV2GimbalActuator = dji_osdk_ros.msg.WaypointV2GimbalActuator()
      if self.waypointV2AircraftControlActuator is None:
        self.waypointV2AircraftControlActuator = dji_osdk_ros.msg.WaypointV2AircraftControlActuator()
      end = 0
      _x = self
      start = end
      end += 68
      (_x.actionId, _x.waypointV2ActionTriggerType, _x.waypointV2ACtionActuatorType, _x.waypointV2AssociateTrigger.actionAssociatedType, _x.waypointV2AssociateTrigger.waitingTime, _x.waypointV2AssociateTrigger.actionIdAssociated, _x.waypointV2IntervalTrigger.startIndex, _x.waypointV2IntervalTrigger.interval, _x.waypointV2IntervalTrigger.actionIntervalType, _x.waypointV2TrajectoryTrigger.startIndex, _x.waypointV2TrajectoryTrigger.endIndex, _x.waypointV2SampleReachPointTrigger.waypointIndex, _x.waypointV2SampleReachPointTrigger.terminateNum, _x.waypointV2CameraActuator.actuatorIndex, _x.waypointV2CameraActuator.DJIWaypointV2ActionActuatorCameraOperationType, _x.waypointV2CameraActuator.focusParam.x, _x.waypointV2CameraActuator.focusParam.y, _x.waypointV2CameraActuator.focusParam.regionType, _x.waypointV2CameraActuator.focusParam.width, _x.waypointV2CameraActuator.focusParam.height, _x.waypointV2CameraActuator.zoomParam.focalLength, _x.waypointV2GimbalActuator.DJIWaypointV2ActionActuatorGimbalOperationType, _x.waypointV2GimbalActuator.actuatorIndex, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.x, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.y, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.z, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.ctrl_mode, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.rollCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.pitchCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.yawCmdIgnore, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.absYawModeRef, _x.waypointV2GimbalActuator.waypointV2GimbalActuatorRotationParam.duationTime, _x.waypointV2AircraftControlActuator.actuatorIndex, _x.waypointV2AircraftControlActuator.DJIWaypointV2ActionActuatorAircraftControlOperationType, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorFlying.isStartFlying, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorRotateHeading.isRelative, _x.waypointV2AircraftControlActuator.waypointV2AircraftControlActuatorRotateHeading.yaw,) = _get_struct_H4B3HB6H2fB2fHBH3h7BH2Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H4B3HB6H2fB2fHBH3h7BH2Bf = None
def _get_struct_H4B3HB6H2fB2fHBH3h7BH2Bf():
    global _struct_H4B3HB6H2fB2fHBH3h7BH2Bf
    if _struct_H4B3HB6H2fB2fHBH3h7BH2Bf is None:
        _struct_H4B3HB6H2fB2fHBH3h7BH2Bf = struct.Struct("<H4B3HB6H2fB2fHBH3h7BH2Bf")
    return _struct_H4B3HB6H2fB2fHBH3h7BH2Bf
