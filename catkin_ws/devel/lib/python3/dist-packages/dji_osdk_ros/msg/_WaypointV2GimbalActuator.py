# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_osdk_ros/WaypointV2GimbalActuator.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_osdk_ros.msg

class WaypointV2GimbalActuator(genpy.Message):
  _md5sum = "8bcaee6b26f8e0a2c23b117c342971ca"
  _type = "dji_osdk_ros/WaypointV2GimbalActuator"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# gimbal actuator will be performed when a waypoint mission is executed.
#constant for DJIWaypointV2ActionActuatorGimbalOperationType
# Rotates the gimbal. Only valid when the trigger type is
# ``DJIWaypointV2MissionV2_DJIWaypointV2TriggerAssociatedTimingType_ReachPoint``.
uint8 DJIWaypointV2ActionActuatorGimbalOperationTypeRotateGimbal = 1
# Unknown
uint8 DJIWaypointV2ActionActuatorGimbalOperationTypeUnknown = 255

uint8 DJIWaypointV2ActionActuatorGimbalOperationType
uint16 actuatorIndex   # The index of actuator. It is valid when the diagnostics is related
                      # to camera or gimbal and the connected product has multiple gimbals and cameras.
WaypointV2GimbalActuatorRotationParam waypointV2GimbalActuatorRotationParam # The operation type of gimbal actuator.
================================================================================
MSG: dji_osdk_ros/WaypointV2GimbalActuatorRotationParam
  int16 x             # gimbal roll angle,  unit: 0.1 deg,range:[-3600, 3600]*/
  int16 y             # gimbal pitch angle, unit: 0.1 deg,range:[-3600, 3600]*/
  int16 z             # gimbal yaw angle,   unit: 0.1 deg,range:[-3600, 3600]*/
  uint8 ctrl_mode     # 0: absolute position control, 1:relative position control*/
  uint8 rollCmdIgnore # 0: roll command normal,  1: roll command ignore*/
  uint8 pitchCmdIgnore# 0: pitch command normal,  1: pitch command ignore*/
  uint8 yawCmdIgnore  # 0: yaw command normal,  1: yaw command ignore*/
  uint8 absYawModeRef # 0: absoluate rotate yaw relative to aircraft,
                      #  1: absoluate rotate yaw relative to North*/
  uint8 duationTime    # 0: rotate time,unit:0.1s, range[1,255]*/"""
  # Pseudo-constants
  DJIWaypointV2ActionActuatorGimbalOperationTypeRotateGimbal = 1
  DJIWaypointV2ActionActuatorGimbalOperationTypeUnknown = 255

  __slots__ = ['DJIWaypointV2ActionActuatorGimbalOperationType','actuatorIndex','waypointV2GimbalActuatorRotationParam']
  _slot_types = ['uint8','uint16','dji_osdk_ros/WaypointV2GimbalActuatorRotationParam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       DJIWaypointV2ActionActuatorGimbalOperationType,actuatorIndex,waypointV2GimbalActuatorRotationParam

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointV2GimbalActuator, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.DJIWaypointV2ActionActuatorGimbalOperationType is None:
        self.DJIWaypointV2ActionActuatorGimbalOperationType = 0
      if self.actuatorIndex is None:
        self.actuatorIndex = 0
      if self.waypointV2GimbalActuatorRotationParam is None:
        self.waypointV2GimbalActuatorRotationParam = dji_osdk_ros.msg.WaypointV2GimbalActuatorRotationParam()
    else:
      self.DJIWaypointV2ActionActuatorGimbalOperationType = 0
      self.actuatorIndex = 0
      self.waypointV2GimbalActuatorRotationParam = dji_osdk_ros.msg.WaypointV2GimbalActuatorRotationParam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BH3h6B().pack(_x.DJIWaypointV2ActionActuatorGimbalOperationType, _x.actuatorIndex, _x.waypointV2GimbalActuatorRotationParam.x, _x.waypointV2GimbalActuatorRotationParam.y, _x.waypointV2GimbalActuatorRotationParam.z, _x.waypointV2GimbalActuatorRotationParam.ctrl_mode, _x.waypointV2GimbalActuatorRotationParam.rollCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.pitchCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.yawCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.absYawModeRef, _x.waypointV2GimbalActuatorRotationParam.duationTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypointV2GimbalActuatorRotationParam is None:
        self.waypointV2GimbalActuatorRotationParam = dji_osdk_ros.msg.WaypointV2GimbalActuatorRotationParam()
      end = 0
      _x = self
      start = end
      end += 15
      (_x.DJIWaypointV2ActionActuatorGimbalOperationType, _x.actuatorIndex, _x.waypointV2GimbalActuatorRotationParam.x, _x.waypointV2GimbalActuatorRotationParam.y, _x.waypointV2GimbalActuatorRotationParam.z, _x.waypointV2GimbalActuatorRotationParam.ctrl_mode, _x.waypointV2GimbalActuatorRotationParam.rollCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.pitchCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.yawCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.absYawModeRef, _x.waypointV2GimbalActuatorRotationParam.duationTime,) = _get_struct_BH3h6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BH3h6B().pack(_x.DJIWaypointV2ActionActuatorGimbalOperationType, _x.actuatorIndex, _x.waypointV2GimbalActuatorRotationParam.x, _x.waypointV2GimbalActuatorRotationParam.y, _x.waypointV2GimbalActuatorRotationParam.z, _x.waypointV2GimbalActuatorRotationParam.ctrl_mode, _x.waypointV2GimbalActuatorRotationParam.rollCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.pitchCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.yawCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.absYawModeRef, _x.waypointV2GimbalActuatorRotationParam.duationTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.waypointV2GimbalActuatorRotationParam is None:
        self.waypointV2GimbalActuatorRotationParam = dji_osdk_ros.msg.WaypointV2GimbalActuatorRotationParam()
      end = 0
      _x = self
      start = end
      end += 15
      (_x.DJIWaypointV2ActionActuatorGimbalOperationType, _x.actuatorIndex, _x.waypointV2GimbalActuatorRotationParam.x, _x.waypointV2GimbalActuatorRotationParam.y, _x.waypointV2GimbalActuatorRotationParam.z, _x.waypointV2GimbalActuatorRotationParam.ctrl_mode, _x.waypointV2GimbalActuatorRotationParam.rollCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.pitchCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.yawCmdIgnore, _x.waypointV2GimbalActuatorRotationParam.absYawModeRef, _x.waypointV2GimbalActuatorRotationParam.duationTime,) = _get_struct_BH3h6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BH3h6B = None
def _get_struct_BH3h6B():
    global _struct_BH3h6B
    if _struct_BH3h6B is None:
        _struct_BH3h6B = struct.Struct("<BH3h6B")
    return _struct_BH3h6B
